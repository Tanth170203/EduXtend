@page "/ClubManager/Activities/Attendances/{id:int}"
@model WebFE.Pages.ClubManager.Activities.AttendancesModel
@{
    ViewData["Title"] = "Attendance Management";
    Layout = "~/Pages/Shared/_ClubManagerLayout.cshtml";
}

<div class="container-fluid px-4 py-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold mb-1">
                <i class="bi bi-clipboard2-check text-primary me-2"></i>Attendance Management
            </h2>
            <p class="text-muted mb-0">@Model.ActivityTitle</p>
        </div>
        <a class="btn btn-outline-secondary" href="/ClubManager/Activities/Details/@Model.ActivityId">
            <i class="bi bi-arrow-left me-2"></i>Back to Activity
        </a>
    </div>

    <!-- Statistics Cards -->
    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-1 small">Total Registered</p>
                            <h3 class="fw-bold mb-0">@Model.Registrants.Count</h3>
                        </div>
                        <div class="bg-primary bg-opacity-10 rounded-circle p-3">
                            <i class="bi bi-people-fill text-primary fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-1 small">Present</p>
                            <h3 class="fw-bold mb-0 text-success">@Model.Registrants.Count(r => r.IsPresent == true)</h3>
                        </div>
                        <div class="bg-success bg-opacity-10 rounded-circle p-3">
                            <i class="bi bi-check-circle-fill text-success fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-1 small">Absent</p>
                            <h3 class="fw-bold mb-0 text-danger">@Model.Registrants.Count(r => r.IsPresent == false)</h3>
                        </div>
                        <div class="bg-danger bg-opacity-10 rounded-circle p-3">
                            <i class="bi bi-x-circle-fill text-danger fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="text-muted mb-1 small">Not Marked</p>
                            <h3 class="fw-bold mb-0 text-warning">@Model.Registrants.Count(r => r.IsPresent == null)</h3>
                        </div>
                        <div class="bg-warning bg-opacity-10 rounded-circle p-3">
                            <i class="bi bi-question-circle-fill text-warning fs-4"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Attendance Table -->
    <div class="card shadow-sm border-0">
        <div class="card-header bg-white border-bottom py-3">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0 fw-semibold">
                    <i class="bi bi-list-check me-2"></i>Registrant List
                </h5>
                <div class="input-group" style="max-width: 300px;">
                    <span class="input-group-text bg-light border-end-0">
                        <i class="bi bi-search"></i>
                    </span>
                    <input type="text" class="form-control border-start-0" id="searchInput" placeholder="Search by name or email...">
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0" id="attendanceTable">
                    <thead class="bg-light">
                        <tr>
                            <th class="px-4 py-3" style="width: 50px;">#</th>
                            <th class="py-3">Participant</th>
                            <th class="py-3">Email</th>
                            <th class="py-3 text-center" style="width: 150px;">Status</th>
                            <th class="py-3 text-center" style="width: 200px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ int index = 1; }
                        @foreach (var r in Model.Registrants)
                        {
                            <tr class="registrant-row">
                                <td class="px-4 text-muted">@index</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="bg-primary bg-opacity-10 rounded-circle p-2 me-3">
                                            <i class="bi bi-person-fill text-primary"></i>
                                        </div>
                                        <span class="fw-medium registrant-name">@r.FullName</span>
                                    </div>
                                </td>
                                <td class="text-muted registrant-email">@r.Email</td>
                                <td class="text-center">
                                    @if (r.IsPresent == true)
                                    {
                                        <span class="badge bg-success-subtle text-success border border-success">
                                            <i class="bi bi-check-circle-fill me-1"></i>Present
                                        </span>
                                    }
                                    else if (r.IsPresent == false)
                                    {
                                        <span class="badge bg-danger-subtle text-danger border border-danger">
                                            <i class="bi bi-x-circle-fill me-1"></i>Absent
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning-subtle text-warning border border-warning">
                                            <i class="bi bi-clock-fill me-1"></i>Pending
                                        </span>
                                    }
                                </td>
                                <td class="text-center">
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button type="button" class="btn @(r.IsPresent == true ? "btn-success" : "btn-outline-success")" 
                                                onclick="setAttendance(@Model.ActivityId, @r.UserId, true, this)"
                                                title="Mark as Present">
                                            <i class="bi bi-check-lg"></i> Present
                                        </button>
                                        <button type="button" class="btn @(r.IsPresent == false ? "btn-danger" : "btn-outline-danger")" 
                                                onclick="setAttendance(@Model.ActivityId, @r.UserId, false, this)"
                                                title="Mark as Absent">
                                            <i class="bi bi-x-lg"></i> Absent
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            index++;
                        }
                        @if (Model.Registrants.Count == 0)
                        {
                            <tr>
                                <td colspan="5" class="text-center py-5 text-muted">
                                    <i class="bi bi-inbox fs-1 d-block mb-3"></i>
                                    <p class="mb-0">No registrants found for this activity</p>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    .bg-success-subtle { background-color: rgba(25, 135, 84, 0.1) !important; }
    .bg-danger-subtle { background-color: rgba(220, 53, 69, 0.1) !important; }
    .bg-warning-subtle { background-color: rgba(255, 193, 7, 0.1) !important; }
    
    .table tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.02);
    }
    
    .btn-group-sm .btn {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
    }
</style>

<script>
    // Search functionality
    document.getElementById('searchInput').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const rows = document.querySelectorAll('.registrant-row');
        
        rows.forEach(row => {
            const name = row.querySelector('.registrant-name').textContent.toLowerCase();
            const email = row.querySelector('.registrant-email').textContent.toLowerCase();
            
            if (name.includes(searchTerm) || email.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });

    // Set attendance
    async function setAttendance(activityId, userId, isPresent, btn) {
        const baseUrl = '@Model.ApiBaseUrl';
        const url = (baseUrl ? baseUrl : '') + `/api/activity/club-manager/${activityId}/attendance/${userId}?isPresent=${isPresent}`;
        
        try {
            const res = await fetch(url, {
                method: 'POST',
                credentials: 'include'
            });
            
            if (!res.ok) {
                const data = await res.json().catch(() => ({}));
                alert(data?.message || 'Update failed');
                return;
            }
            
            // Update UI immediately
            const clickedButton = btn;
            const btnGroup = clickedButton.closest('.btn-group');
            const row = clickedButton.closest('tr');
            const statusBadge = row.querySelector('.badge');
            
            // Update buttons state
            const presentBtn = btnGroup.querySelector('button:first-child');
            const absentBtn = btnGroup.querySelector('button:last-child');
            
            if (isPresent) {
                // Mark as Present
                presentBtn.classList.remove('btn-outline-success');
                presentBtn.classList.add('btn-success');
                absentBtn.classList.remove('btn-danger');
                absentBtn.classList.add('btn-outline-danger');
                
                // Update badge
                statusBadge.className = 'badge bg-success-subtle text-success border border-success';
                statusBadge.innerHTML = '<i class="bi bi-check-circle-fill me-1"></i>Present';
            } else {
                // Mark as Absent
                presentBtn.classList.remove('btn-success');
                presentBtn.classList.add('btn-outline-success');
                absentBtn.classList.remove('btn-outline-danger');
                absentBtn.classList.add('btn-danger');
                
                // Update badge
                statusBadge.className = 'badge bg-danger-subtle text-danger border border-danger';
                statusBadge.innerHTML = '<i class="bi bi-x-circle-fill me-1"></i>Absent';
            }
            
            // Show brief success feedback
            clickedButton.innerHTML = '<i class="bi bi-check-lg"></i> Saved!';
            setTimeout(() => {
                if (isPresent) {
                    clickedButton.innerHTML = '<i class="bi bi-check-lg"></i> Present';
                } else {
                    clickedButton.innerHTML = '<i class="bi bi-x-lg"></i> Absent';
                }
            }, 1000);
            
        } catch (error) {
            alert('An error occurred while updating attendance');
        }
    }
</script>

