@page
@model WebFE.Pages.Admin.Activities.CreateModel
@{
    ViewData["Title"] = "Create Activity";
    Layout = "~/Pages/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid px-4 py-4">
    <div class="mb-4">
        <h2 class="mb-1 fw-bold">Create Activity</h2>
        <p class="text-muted mb-0">Add a new activity to the system</p>
    </div>

    <form method="post">
        <div class="card shadow-sm border-0">
            <div class="card-body p-4">
                <div class="row g-4">
                    <div class="col-md-8">
                        <label asp-for="Input.Title" class="form-label fw-semibold">Title <span class="text-danger">*</span></label>
                        <input asp-for="Input.Title" class="form-control form-control-lg" placeholder="Enter activity title" />
                        <span asp-validation-for="Input.Title" class="text-danger small"></span>
                    </div>
                    <div class="col-md-4">
                        <label asp-for="Input.Type" class="form-label fw-semibold">Type <span class="text-danger">*</span></label>
                        <select asp-for="Input.Type" class="form-select form-select-lg" id="activityTypeSelect">
                            <optgroup label="Events">
                                <option value="3">Large Event (100-200 people) - 20 points</option>
                                <option value="4">Medium Event (50-100 people) - 15 points</option>
                                <option value="5">Small Event (&lt;50 people) - 5 points</option>
                            </optgroup>
                            <optgroup label="Competitions">
                                <option value="6">School Competition (5-10 points)</option>
                                <option value="7">Provincial Competition - 20 points</option>
                                <option value="8">National Competition - 30 points</option>
                            </optgroup>
                            <optgroup label="Community">
                                <option value="9">Volunteer (1-5 points)</option>
                            </optgroup>
                            <optgroup label="Collaboration">
                                <option value="10">Club Collaboration (1-10 points)</option>
                                <option value="11">School Collaboration (1-10 points)</option>
                                <option value="12">Enterprise Collaboration (1-10 points)</option>
                            </optgroup>
                            <optgroup label="Other">
                                <option value="13">Other (1-5 points)</option>
                            </optgroup>
                        </select>
                    </div>
                    
                    <div class="col-12">
                        <label asp-for="Input.Description" class="form-label fw-semibold">Description</label>
                        <textarea asp-for="Input.Description" class="form-control" rows="5" placeholder="Describe the activity..."></textarea>
                    </div>
                    
                    <div class="col-md-6">
                        <label asp-for="Input.Location" class="form-label fw-semibold">Location</label>
                        <input asp-for="Input.Location" class="form-control" placeholder="Room 101, Building A" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Activity Image</label>
                        <input type="file" class="form-control" id="imageFile" accept="image/*" />
                        <input type="hidden" asp-for="Input.ImageUrl" />
                        <div id="imagePreview" class="mt-2" style="display:none;">
                            <img id="previewImg" src="#" class="rounded" style="max-width: 100%; max-height: 200px;" />
                            <button type="button" class="btn btn-sm btn-outline-danger mt-2" id="removeImageBtn">Remove</button>
                        </div>
                        <div class="form-text">Upload an image from your device</div>
                        <div id="imageUploadStatus" class="small text-muted mt-1"></div>
                    </div>
                    
                    <div class="col-md-6">
                        <label asp-for="Input.StartTime" class="form-label fw-semibold">Start Time <span class="text-danger">*</span></label>
                        <input asp-for="Input.StartTime" asp-format="{0:yyyy-MM-ddTHH:mm}" type="datetime-local" class="form-control" id="startTimeInput" step="60" />
                        <span asp-validation-for="Input.StartTime" class="text-danger small"></span>
                        <div id="startTimeError" class="text-danger small"></div>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="Input.EndTime" class="form-label fw-semibold">End Time <span class="text-danger">*</span></label>
                        <input asp-for="Input.EndTime" asp-format="{0:yyyy-MM-ddTHH:mm}" type="datetime-local" class="form-control" id="endTimeInput" step="60" />
                        <span asp-validation-for="Input.EndTime" class="text-danger small"></span>
                        <div id="endTimeError" class="text-danger small"></div>
                    </div>
                    
                    <div class="col-md-4">
                        <label asp-for="Input.MaxParticipants" class="form-label fw-semibold">Max Participants</label>
                        <input asp-for="Input.MaxParticipants" type="number" class="form-control" placeholder="Leave empty for unlimited" />
                        <div class="form-text">Maximum number of participants</div>
                    </div>
                    <div class="col-md-4">
                        <label asp-for="Input.MovementPoint" class="form-label fw-semibold">Movement Points <span class="text-danger">*</span></label>
                        <input asp-for="Input.MovementPoint" type="number" step="0.5" class="form-control" id="MovementPointInput" placeholder="0" min="0" required />
                        <div class="form-text" id="MovementPointHint">Points will be auto-filled based on activity type</div>
                        <span class="text-danger small" id="MovementPointError"></span>
                    </div>
                    <div class="col-md-4 d-flex align-items-center">
                        <div class="form-check form-switch">
                            <input asp-for="Input.IsPublic" class="form-check-input" role="switch" style="width: 3em; height: 1.5em;" />
                            <label asp-for="Input.IsPublic" class="form-check-label fw-semibold ms-2">Public Activity</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer bg-light border-0 p-4 d-flex justify-content-between">
                <a class="btn btn-lg btn-outline-secondary px-4" href="/Admin/Activities">
                    <i class="bi bi-x-circle me-2"></i>Cancel
                </a>
                <button class="btn btn-lg btn-primary px-4" type="submit">
                    <i class="bi bi-check-circle me-2"></i>Create Activity
                </button>
            </div>
        </div>
    </form>
</div>

<partial name="_ValidationScriptsPartial" />

<script>
    // ===== Auto-fill Movement Points based on Activity Type =====
    const activityTypeSelect = document.getElementById('activityTypeSelect');
    const movementPointInput = document.getElementById('MovementPointInput');
    const movementPointHint = document.getElementById('MovementPointHint');
    const movementPointError = document.getElementById('MovementPointError');

    // Points mapping based on activity type (Admin - no Club Activities)
    const activityPoints = {
        // Events
        '3': { fixed: 20, hint: 'Large Event (100-200 people): 20 points' }, // LargeEvent
        '4': { fixed: 15, hint: 'Medium Event (50-100 people): 15 points' }, // MediumEvent
        '5': { fixed: 5, hint: 'Small Event (<50 people): 5 points' }, // SmallEvent
        
        // Competitions
        '6': { min: 5, max: 10, hint: 'School Competition: 5-10 points (depending on scale and nature)' }, // SchoolCompetition
        '7': { fixed: 20, hint: 'Provincial Competition: 20 points' }, // ProvincialCompetition
        '8': { fixed: 30, hint: 'National Competition: 30 points' }, // NationalCompetition
        
        // Volunteer
        '9': { min: 1, max: 5, hint: 'Volunteer: 1-5 points (manual input required)' }, // Volunteer
        
        // Collaboration
        '10': { min: 1, max: 10, hint: 'Club Collaboration - Organizer role: 1-10 points (based on 5-10 organizing members)' }, // ClubCollaboration
        '11': { min: 1, max: 10, hint: 'School Collaboration - Organizer role: 1-10 points (based on 5-10 organizing members)' }, // SchoolCollaboration
        '12': { min: 1, max: 10, hint: 'Enterprise Collaboration - Organizer role: 1-10 points (based on 5-10 organizing members)' }, // EnterpriseCollaboration
        
        // Other
        '13': { min: 1, max: 5, hint: 'Other activities: 1-5 points (manual input required)' } // Other
    };

    function updateMovementPoints() {
        const selectedType = activityTypeSelect.value;
        const pointsConfig = activityPoints[selectedType];
        
        if (!pointsConfig) return;
        
        // Clear error
        movementPointError.textContent = '';
        
        if (pointsConfig.fixed !== undefined) {
            // Fixed points
            movementPointInput.value = pointsConfig.fixed;
            movementPointInput.readOnly = (pointsConfig.fixed > 0);
            movementPointInput.min = pointsConfig.fixed;
            movementPointInput.max = pointsConfig.fixed;
        } else if (pointsConfig.min !== undefined && pointsConfig.max !== undefined) {
            // Range points
            movementPointInput.value = pointsConfig.min;
            movementPointInput.readOnly = false;
            movementPointInput.min = pointsConfig.min;
            movementPointInput.max = pointsConfig.max;
        }
        
        movementPointHint.textContent = pointsConfig.hint;
    }

    // Validate movement points on change
    function validateMovementPoints() {
        const selectedType = activityTypeSelect.value;
        const pointsConfig = activityPoints[selectedType];
        const value = parseFloat(movementPointInput.value);
        
        if (!pointsConfig) return true;
        
        if (pointsConfig.min !== undefined && pointsConfig.max !== undefined) {
            if (value < pointsConfig.min || value > pointsConfig.max) {
                movementPointError.textContent = `Points must be between ${pointsConfig.min} and ${pointsConfig.max}`;
                return false;
            }
        }
        
        movementPointError.textContent = '';
        return true;
    }

    activityTypeSelect?.addEventListener('change', updateMovementPoints);
    movementPointInput?.addEventListener('change', validateMovementPoints);
    movementPointInput?.addEventListener('input', validateMovementPoints);

    // Initial update
    updateMovementPoints();

    // ===== Date Validation =====
    const startTimeInput = document.getElementById('startTimeInput');
    const endTimeInput = document.getElementById('endTimeInput');
    const startTimeError = document.getElementById('startTimeError');
    const endTimeError = document.getElementById('endTimeError');

    function setError(element, message) {
        if (!element) return;
        element.textContent = message || '';
    }
    function clearErrors() {
        setError(startTimeError, '');
        setError(endTimeError, '');
    }
    
    // Set minimum date to now and update every minute
    function updateMinDateTime() {
        const now = new Date();
        const minDateTime = now.toISOString().slice(0, 16);
        startTimeInput.setAttribute('min', minDateTime);
        endTimeInput.setAttribute('min', minDateTime);
    }
    updateMinDateTime();
    setInterval(updateMinDateTime, 60000); // Update every minute
    
    // Validate dates on change
    startTimeInput?.addEventListener('change', function() {
        clearErrors();
        const startDate = new Date(this.value);
        const currentDate = new Date();
        
        if (this.value && startDate < currentDate) {
            setError(startTimeError, 'Không được chọn ngày giờ bắt đầu trong quá khứ');
            this.value = '';
            return;
        }
        
        // Update end time minimum to start time
        if (this.value) endTimeInput.setAttribute('min', this.value);
        
        // Check if end time is before or equal to start time
        if (endTimeInput.value && new Date(endTimeInput.value) <= startDate) {
            setError(endTimeError, 'Thời gian kết thúc phải sau thời gian bắt đầu');
            endTimeInput.value = '';
        }
    });
    
    endTimeInput?.addEventListener('change', function() {
        clearErrors();
        const endDate = new Date(this.value);
        const currentDate = new Date();
        
        if (this.value && endDate < currentDate) {
            setError(endTimeError, 'End time cannot be in the past');
            this.value = '';
            return;
        }
        
        if (startTimeInput.value && endDate <= new Date(startTimeInput.value)) {
            setError(endTimeError, 'Thời gian kết thúc phải sau thời gian bắt đầu');
            this.value = '';
        }
    });
    
    // Validate before form submit
    document.querySelector('form')?.addEventListener('submit', function(e) {
        clearErrors();
        const startDate = startTimeInput.value ? new Date(startTimeInput.value) : null;
        const endDate = endTimeInput.value ? new Date(endTimeInput.value) : null;
        const currentDate = new Date();
        let hasError = false;
        
        if (startDate && startDate < currentDate) {
            setError(startTimeError, 'Không được chọn ngày giờ bắt đầu trong quá khứ');
            hasError = true;
        }
        
        if (endDate && endDate < currentDate) {
            setError(endTimeError, 'End time cannot be in the past');
            hasError = true;
        }
        
        if (startDate && endDate && endDate <= startDate) {
            setError(endTimeError, 'Thời gian kết thúc phải sau thời gian bắt đầu');
            hasError = true;
        }
        
        // Validate movement points
        if (!validateMovementPoints()) {
            hasError = true;
        }
        
        if (hasError) {
            e.preventDefault();
            return false;
        }
    });

    // ===== Image upload to Cloudinary =====
    const fileInput = document.getElementById('imageFile');
    const statusEl = document.getElementById('imageUploadStatus');
    const preview = document.getElementById('imagePreview');
    const previewImg = document.getElementById('previewImg');
    const removeBtn = document.getElementById('removeImageBtn');

    fileInput?.addEventListener('change', async (e) => {
        const file = e.target.files && e.target.files[0];
        if (!file) return;
        
        statusEl.textContent = 'Uploading...';
        statusEl.classList.remove('text-danger', 'text-success');
        statusEl.classList.add('text-primary');

        try {
            const form = new FormData();
            form.append('file', file);
            
            console.log('Uploading file:', file.name);
            
            const res = await fetch('@Model.ApiBaseUrl/api/activity/upload-image', {
                method: 'POST',
                body: form,
                credentials: 'include'
            });
            
            console.log('Upload response status:', res.status);
            
            if (!res.ok) {
                const errorText = await res.text();
                console.error('Upload error:', errorText);
                throw new Error(`Upload failed: ${res.status}`);
            }
            
            const data = await res.json();
            console.log('Upload response data:', data);
            
            if (!data.url) {
                throw new Error('No URL returned from server');
            }

            // Set hidden field and preview
            document.getElementById('Input_ImageUrl').value = data.url;
            previewImg.src = data.url;
            preview.style.display = 'block';
            statusEl.textContent = '✓ Uploaded successfully';
            statusEl.classList.remove('text-primary', 'text-danger');
            statusEl.classList.add('text-success');
        } catch (err) {
            console.error('Upload error:', err);
            statusEl.textContent = '✗ ' + (err.message || 'Upload failed');
            statusEl.classList.remove('text-primary', 'text-success');
            statusEl.classList.add('text-danger');
            fileInput.value = '';
        }
    });

    removeBtn?.addEventListener('click', () => {
        document.getElementById('Input_ImageUrl').value = '';
        previewImg.src = '#';
        preview.style.display = 'none';
        fileInput.value = '';
        statusEl.textContent = '';
    });
</script>


