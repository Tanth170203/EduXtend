@page

@model WebFE.Pages.Admin.ClubScoring.ManualAddModel

@{

    ViewData["Title"] = "Thêm điểm thủ công";

    Layout = "~/Pages/Shared/_AdminLayout.cshtml";

}



<!-- Breadcrumb -->

<nav aria-label="breadcrumb" class="mb-3">

    <ol class="breadcrumb">

        <li class="breadcrumb-item"><a href="/Admin">Admin</a></li>

        <li class="breadcrumb-item"><a href="/Admin/ClubScoring">Club Scoring</a></li>

        <li class="breadcrumb-item active">Thêm điểm</li>

    </ol>

</nav>



<!-- Page Header -->

<div class="page-header mb-4">

    <div class="d-flex align-items-center justify-content-between flex-wrap gap-3">

        <div>

            <h1 class="page-title">

                <i data-lucide="plus-circle" style="width: 28px; height: 28px; display: inline-block; vertical-align: middle; margin-right: 0.5rem;"></i>

                Cộng Điểm Phong Trào

            </h1>

            <p class="page-description">Thêm điểm phong trào cho CLB</p>

        </div>

        <div>

            <a class="btn btn-outline-secondary" href="/Admin/ClubScoring/Detail?clubId=@Model.ClubId&semesterId=@Model.SemesterId&month=@Model.Month">

                <i data-lucide="arrow-left"></i> Quay lại

            </a>

        </div>

    </div>

</div>



<!-- Form Card -->

<div class="row justify-content-center">

    <div class="col-lg-8">

        <div class="card border-0 shadow-sm">

            <!-- Yellow Banner -->

            <div class="card-header bg-warning text-dark d-flex align-items-center justify-content-center py-3">

                <i data-lucide="edit-3" style="width: 20px; height: 20px; margin-right: 0.5rem;"></i>

                <strong>Thông tin cộng điểm</strong>

            </div>



            <div class="card-body">

                <form method="post">

                    <input type="hidden" asp-for="Input.ClubId" />

                    <input type="hidden" asp-for="Input.SemesterId" />

                    <input type="hidden" asp-for="Input.Month" />



                    <!-- Selected Club Card -->

                    <div class="mb-4">

                        <div class="border border-info rounded p-3 bg-light">

                            <div class="d-flex align-items-center">

                                <i data-lucide="users" style="width: 20px; height: 20px; margin-right: 0.75rem; color: #0d6efd;"></i>

                                <div>

                                    <strong>@Model.ClubName</strong><br>

                                    <small class="text-muted">@Model.SemesterName - Tháng @Model.Month</small>

                                </div>

                            </div>

                        </div>

                    </div>



                    <!-- Group Selection -->

                    <div class="mb-4">

                        <label for="GroupId" class="form-label fw-semibold">

                            <i data-lucide="folder" style="width: 16px; height: 16px; margin-right: 6px;"></i>

                            Danh mục <span class="text-danger">*</span>

                        </label>

                        <select asp-for="GroupId" class="form-select form-select-lg" id="GroupId" required onchange="updateCriteriaDropdown()">

                            <option value="">-- Chọn danh mục --</option>

                            @foreach (var group in Model.Groups)

                            {

                                <option value="@group.Id" data-max="@group.MaxScore">

                                    @group.Name (Max: @group.MaxScore điểm)

                                </option>

                            }

                        </select>

                        <small class="text-muted d-block mt-2">

                            <i data-lucide="info" style="width: 14px; height: 14px;"></i>

                            Chọn danh mục trước, sau đó chọn tiêu chí cụ thể

                        </small>

                    </div>



                    <!-- Criterion Selection (dependent on Group) -->

                    <div class="mb-4">

                        <label for="CriterionId" class="form-label fw-semibold">

                            <i data-lucide="list" style="width: 16px; height: 16px; margin-right: 6px;"></i>

                            Tiêu chí <span class="text-danger">*</span>

                        </label>

                        <select asp-for="Input.CriterionId" class="form-select form-select-lg" id="CriterionId" required disabled onchange="updateScoreHint()">

                            <option value="">-- Chọn danh mục trước --</option>

                        </select>

                        <small class="text-muted d-block mt-2" id="criterionHint">

                            <i data-lucide="info" style="width: 14px; height: 14px;"></i>

                            Tiêu chí sẽ được hiển thị sau khi chọn danh mục

                        </small>

                    </div>



                    <!-- Score Input -->

                    <div class="mb-4">

                        <label class="form-label fw-semibold">

                            <i data-lucide="award" style="width: 16px; height: 16px; margin-right: 6px;"></i>

                            Điểm <span class="text-danger">*</span>

                        </label>

                        <input class="form-control" type="number" asp-for="Input.Score" id="scoreInput" min="0" step="0.5" placeholder="Nhập điểm (VD: 5, 10, 15)" required>

                        <small class="text-muted d-block mt-2" id="rangeHint">

                            <i data-lucide="info" style="width: 14px; height: 14px;"></i>

                            Chọn tiêu chí để hiển thị range điểm

                        </small>

                    </div>



                    <!-- Note Input -->

                    <div class="mb-4">

                        <label class="form-label fw-semibold">

                            <i data-lucide="sticky-note" style="width: 16px; height: 16px; margin-right: 6px;"></i>

                            Ghi chú <span class="text-danger">*</span>

                        </label>

                        <textarea class="form-control" asp-for="Input.Note" rows="3" minlength="10" placeholder="Mô tả lý do cộng điểm, bằng chứng, liên hệ biểu mẫu..." required></textarea>

                        <small class="text-muted d-block mt-2">

                            Bắt buộc nhập tối thiểu 10 ký tự. Lưu trong chi tiết điểm (Note).

                        </small>

                    </div>



                    <!-- Scoring Suggestions -->

                    <div class="alert alert-info bg-info bg-opacity-10 mt-3">

                        <div class="d-flex align-items-center mb-2">

                            <i data-lucide="lightbulb" style="width: 16px; height: 16px; margin-right: 0.5rem;"></i>

                            <strong>Gợi ý chấm điểm CLB</strong>

                        </div>

                        <ul class="mb-0">

                            <li><strong>Sinh hoạt CLB:</strong> 1-3 điểm/lần (3 điểm nếu >10 thành viên; 2 điểm 5-10; 1 điểm <5)</li>

                            <li><strong>Sự kiện:</strong> 2-5 điểm/sự kiện (5 điểm nếu >15 thành viên; 3 điểm 10-15; 2 điểm <10)</li>

                            <li><strong>Cuộc thi:</strong> 5-30 điểm (30 điểm cấp Quốc gia; 20 điểm cấp Tỉnh/TP; 10 điểm cấp Trường)</li>

                            <li><strong>Phối hợp:</strong> 3-10 điểm (10 điểm BTC chính; 5 điểm tham dự; 3 điểm hỗ trợ)</li>

                            <li><strong>Kế hoạch:</strong> 10 điểm nếu hoàn thành đúng hạn</li>

                        </ul>

                    </div>



                    <!-- Info Box -->

                    <div class="alert alert-info bg-info bg-opacity-10 border-0">

                        <div class="d-flex">

                            <i data-lucide="alert-circle" style="width: 18px; height: 18px; margin-right: 10px; color: #0d6efd; flex-shrink: 0; margin-top: 2px;"></i>

                            <div>

                                <strong>Lưu ý quan trọng:</strong>

                                <ul class="mb-0 mt-2 ms-2">

                                    <li>📅 <strong>Ngày thực hiện:</strong> Mặc định là ngày hôm nay</li>

                                    <li>🔄 <strong>Cộng dồn:</strong> Cho phép cộng nhiều lần cùng tiêu chí</li>

                                    <li>⚖️ <strong>Giới hạn:</strong> Theo Max của tiêu chí</li>

                                    <li>📝 <strong>Ghi chú:</strong> Bắt buộc để audit (hiển thị ở chi tiết)</li>

                                </ul>

                            </div>

                        </div>

                    </div>



                    <hr class="my-4">



                    <!-- Form Actions -->

                    <div class="d-flex justify-content-between align-items-center">

                        <a href="/Admin/ClubScoring/Detail?clubId=@Model.ClubId&semesterId=@Model.SemesterId&month=@Model.Month" class="btn btn-outline-secondary">

                            <i data-lucide="x" style="width: 16px; height: 16px;"></i>

                            Hủy

                        </a>

                        <button type="submit" class="btn btn-warning btn-lg fw-bold">

                            <i data-lucide="check-circle" style="width: 18px; height: 18px;"></i>

                            Xác nhận cộng điểm

                        </button>

                    </div>

                </form>

            </div>

        </div>

    </div>

</div>



@section Scripts {

    <script>

        // All criteria data from server

        @{

                var jsonOptions = new System.Text.Json.JsonSerializerOptions

                {

                        PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase

                };

        }

        const allCriteria = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AllCriteria, jsonOptions));



        // Debug: Log criteria data to check structure

        console.log('All Criteria loaded:', allCriteria);

        console.log('Total criteria count:', allCriteria.length);

        if (allCriteria.length > 0) {

            console.log('Sample criterion:', allCriteria[0]);

        }



        document.addEventListener('DOMContentLoaded', function() {

            if (typeof lucide !== 'undefined') {

                lucide.createIcons();

            }

        });



        function updateCriteriaDropdown() {

            const groupSelect = document.getElementById('GroupId');

            const criterionSelect = document.getElementById('CriterionId');

            const criterionHint = document.getElementById('criterionHint');

            const rangeHint = document.getElementById('rangeHint');

            const scoreInput = document.getElementById('scoreInput');

            const selectedGroupId = parseInt(groupSelect.value);



            // Clear current options

            criterionSelect.innerHTML = '<option value="">-- Chọn tiêu chí --</option>';



            if (selectedGroupId) {

                // Debug: Log selected group and criteria structure

                console.log('Selected Group ID:', selectedGroupId);



                // Filter criteria by selected group - handle both camelCase and PascalCase

                const filteredCriteria = allCriteria.filter(c => {

                    const criterionGroupId = parseInt(c.groupId || c.GroupId || 0);

                    return criterionGroupId === selectedGroupId;

                });



                // Debug: Log filtered results

                console.log('Filtered Criteria count:', filteredCriteria.length);

                if (filteredCriteria.length > 0) {

                    console.log('Sample filtered criterion:', filteredCriteria[0]);

                } else {

                    console.log('No criteria found for group ID:', selectedGroupId);

                    console.log('All criteria groups:', allCriteria.map(c => ({

                        id: c.id || c.Id,

                        groupId: c.groupId || c.GroupId,

                        title: c.title || c.Title

                    })));

                }



                if (filteredCriteria.length > 0) {

                    // Add filtered criteria to dropdown

                    filteredCriteria.forEach(criterion => {

                        const option = document.createElement('option');

                        // Handle both camelCase and PascalCase for property names

                        const criterionId = criterion.id || criterion.Id;

                        const maxScore = criterion.maxScore || criterion.MaxScore;

                        const minScore = criterion.minScore !== undefined ? criterion.minScore : (criterion.MinScore !== undefined ? criterion.MinScore : 0);

                        const title = criterion.title || criterion.Title;



                        option.value = criterionId;

                        option.setAttribute('data-max', maxScore);

                        if (minScore !== null && minScore !== undefined && minScore > 0) {

                            option.setAttribute('data-min', minScore);

                            option.textContent = `${title} (Min: ${minScore} - Max: ${maxScore})`;

                        } else {

                            option.setAttribute('data-min', '0');

                            option.textContent = `${title} (Max: ${maxScore} điểm)`;

                        }

                        criterionSelect.appendChild(option);

                    });



                    criterionSelect.disabled = false;

                    criterionHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Đã tải ' + filteredCriteria.length + ' tiêu chí cho danh mục này';

                } else {

                    criterionSelect.disabled = true;

                    criterionHint.innerHTML = '<i data-lucide="alert-circle" style="width: 14px; height: 14px;"></i> Danh mục này chưa có tiêu chí nào';

                }



                // Update criterion max score hint

                rangeHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Chọn tiêu chí để xem giới hạn cụ thể';



                // Reset score hint and validate current score

                updateScoreHint();

                validateScore();

            } else {

                criterionSelect.disabled = true;

                criterionSelect.innerHTML = '<option value="">-- Chọn danh mục trước --</option>';

                criterionHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Tiêu chí sẽ được hiển thị sau khi chọn danh mục';

                rangeHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Chọn danh mục và tiêu chí để xem giới hạn';

            }



            if (typeof lucide !== 'undefined') {

                lucide.createIcons();

            }

        }



        function updateScoreHint() {

            const criterionSelect = document.getElementById('CriterionId');

            const rangeHint = document.getElementById('rangeHint');

            const scoreInput = document.getElementById('scoreInput');

            const selectedOption = criterionSelect.options[criterionSelect.selectedIndex];



            if (criterionSelect.value) {

                const criterionMaxScore = selectedOption.getAttribute('data-max');

                const criterionMinScore = selectedOption.getAttribute('data-min');

                if (criterionMinScore && parseInt(criterionMinScore) > 0) {

                    rangeHint.innerHTML = `<i data-lucide="info" style="width: 14px; height: 14px;"></i> Phạm vi điểm: ${criterionMinScore} - ${criterionMaxScore} điểm/lần`;

                    scoreInput.setAttribute('min', criterionMinScore);

                    scoreInput.setAttribute('max', criterionMaxScore);

                } else {

                    rangeHint.innerHTML = `<i data-lucide="info" style="width: 14px; height: 14px;"></i> Giới hạn tiêu chí: tối đa ${criterionMaxScore} điểm/lần`;

                    scoreInput.setAttribute('min', '0');

                    scoreInput.setAttribute('max', criterionMaxScore);

                }

            } else {

                rangeHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Chọn tiêu chí để xem giới hạn cụ thể';

            }

        }



        // Validation on frontend

        function validateScore() {

            const criterionSelect = document.getElementById('CriterionId');

            const scoreInput = document.getElementById('scoreInput');

            const rangeHint = document.getElementById('rangeHint');



            if (criterionSelect.value && scoreInput.value) {

                const selectedOption = criterionSelect.options[criterionSelect.selectedIndex];

                const criterionMaxScore = parseFloat(selectedOption.getAttribute('data-max'));

                const criterionMinScore = parseFloat(selectedOption.getAttribute('data-min'));

                const inputScore = parseFloat(scoreInput.value);



                if (!isNaN(criterionMinScore) && criterionMinScore > 0 && inputScore < criterionMinScore) {

                    rangeHint.innerHTML = `<i data-lucide="alert-circle" style="width: 14px; height: 14px; color: red;"></i> <span style="color: red;">Lỗi: Điểm nhập (${inputScore}) nhỏ hơn mức tối thiểu (${criterionMinScore})</span>`;

                    scoreInput.classList.add('is-invalid');

                    return false;

                } else if (inputScore > criterionMaxScore) {

                    rangeHint.innerHTML = `<i data-lucide="alert-circle" style="width: 14px; height: 14px; color: red;"></i> <span style="color: red;">Lỗi: Điểm nhập (${inputScore}) vượt quá giới hạn tiêu chí (${criterionMaxScore} điểm)</span>`;

                    scoreInput.classList.add('is-invalid');

                    return false;

                } else {

                    updateScoreHint();

                    scoreInput.classList.remove('is-invalid');

                    return true;

                }

            }

            return true;

        }



        document.addEventListener('DOMContentLoaded', function() {

            const scoreInput = document.getElementById('scoreInput');

            if (scoreInput) {

                scoreInput.addEventListener('input', validateScore);

                scoreInput.addEventListener('blur', validateScore);

            }

        });

    </script>

}



<style>

    .page-header {
        padding-bottom: 1rem;
        border-bottom: 1px solid #e5e7eb;
    }



    .card {
        transition: all 0.3s ease;
    }



    .is-invalid {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
    }



    .validation-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .validation-success {
        color: #28a745;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .form-label {
        margin-bottom: 0.5rem;
    }

    .alert ul {
        padding-left: 1rem;
    }

    .alert li {
        margin-bottom: 0.5rem;
    }
</style>