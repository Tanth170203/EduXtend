@page
@model WebFE.Pages.Admin.ClubScoring.ManualAddModel
@{
    ViewData["Title"] = "Manual Score Entry";
    Layout = "~/Pages/Shared/_AdminLayout.cshtml";
}

<!-- Breadcrumb -->
<nav aria-label="breadcrumb" class="mb-3">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/Admin">Admin</a></li>
        <li class="breadcrumb-item"><a href="/Admin/ClubScoring">Club Scoring</a></li>
        <li class="breadcrumb-item active">Add Score</li>
    </ol>
</nav>

<!-- Page Header -->
<div class="page-header mb-4">
    <div class="d-flex align-items-center justify-content-between flex-wrap gap-3">
        <div>
            <h1 class="page-title">
                <i data-lucide="plus-circle" style="width: 28px; height: 28px; display: inline-block; vertical-align: middle; margin-right: 0.5rem;"></i>
                Add Club Activity Score
            </h1>
            <p class="page-description">Add activity points for a club</p>
        </div>
        <div>
            <a class="btn btn-outline-secondary" href="/Admin/ClubScoring/Detail?clubId=@Model.ClubId&semesterId=@Model.SemesterId&month=@Model.Month">
                <i data-lucide="arrow-left"></i> Back
            </a>
        </div>
    </div>
</div>

<!-- Form Card -->
<div class="row justify-content-center">
    <div class="col-lg-8">
        <div class="card border-0 shadow-sm">
            <!-- Yellow Banner -->
            <div class="card-header bg-warning text-dark d-flex align-items-center justify-content-center py-3">
                <i data-lucide="edit-3" style="width: 20px; height: 20px; margin-right: 0.5rem;"></i>
                <strong>Score Information</strong>
            </div>

            <div class="card-body">
                <form method="post">
                    <input type="hidden" asp-for="Input.ClubId" />
                    <input type="hidden" asp-for="Input.SemesterId" />
                    <input type="hidden" asp-for="Input.Month" />

                    <!-- Selected Club Card -->
                    <div class="mb-4">
                        <div class="border border-info rounded p-3 bg-light">
                            <div class="d-flex align-items-center">
                                <i data-lucide="users" style="width: 20px; height: 20px; margin-right: 0.75rem; color: #0d6efd;"></i>
                                <div>
                                    <strong>@Model.ClubName</strong><br>
                                    <small class="text-muted">@Model.SemesterName - Month @Model.Month</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Group Selection -->
                    <div class="mb-4">
                        <label for="GroupId" class="form-label fw-semibold">
                            <i data-lucide="folder" style="width: 16px; height: 16px; margin-right: 6px;"></i>
                            Category <span class="text-danger">*</span>
                        </label>
                        <select asp-for="GroupId" class="form-select form-select-lg" id="GroupId" required onchange="updateCriteriaDropdown()">
                            <option value="">-- Select Category --</option>
                            @foreach (var group in Model.Groups)
                            {
                                <option value="@group.Id" data-max="@group.MaxScore">
                                    @group.Name (Max: @group.MaxScore points)
                                </option>
                            }
                        </select>
                        <small class="text-muted d-block mt-2">
                            <i data-lucide="info" style="width: 14px; height: 14px;"></i>
                            Select a category first, then choose a specific criterion
                        </small>
                    </div>

                    <!-- Criterion Selection -->
                    <div class="mb-4">
                        <label for="CriterionId" class="form-label fw-semibold">
                            <i data-lucide="list" style="width: 16px; height: 16px; margin-right: 6px;"></i>
                            Criterion <span class="text-danger">*</span>
                        </label>
                        <select asp-for="Input.CriterionId" class="form-select form-select-lg" id="CriterionId" required disabled onchange="updateScoreHint()">
                            <option value="">-- Select a category first --</option>
                        </select>
                        <small class="text-muted d-block mt-2" id="criterionHint">
                            <i data-lucide="info" style="width: 14px; height: 14px;"></i>
                            Criteria will appear after selecting a category
                        </small>
                    </div>

                    <!-- Score Input -->
                    <div class="mb-4">
                        <label class="form-label fw-semibold">
                            <i data-lucide="award" style="width: 16px; height: 16px; margin-right: 6px;"></i>
                            Score <span class="text-danger">*</span>
                        </label>
                        <input class="form-control" type="number" asp-for="Input.Score" id="scoreInput" min="0" step="0.5" placeholder="Enter score (e.g., 5, 10, 15)" required>
                        <small class="text-muted d-block mt-2" id="rangeHint">
                            <i data-lucide="info" style="width: 14px; height: 14px;"></i>
                            Select a criterion to see the score range
                        </small>
                    </div>

                    <!-- Note Input -->
                    <div class="mb-4">
                        <label class="form-label fw-semibold">
                            <i data-lucide="sticky-note" style="width: 16px; height: 16px; margin-right: 6px;"></i>
                            Note <span class="text-danger">*</span>
                        </label>
                        <textarea class="form-control" asp-for="Input.Note" rows="3" minlength="10" placeholder="Describe reason for adding points, evidence, link to form..." required></textarea>
                        <small class="text-muted d-block mt-2">
                            Minimum 10 characters required. Stored in score details (Note).
                        </small>
                    </div>

                    <!-- Scoring Suggestions -->
                    <div class="alert alert-info bg-info bg-opacity-10 mt-3">
                        <div class="d-flex align-items-center mb-2">
                            <i data-lucide="lightbulb" style="width: 16px; height: 16px; margin-right: 0.5rem;"></i>
                            <strong>Club Scoring Suggestions</strong>
                        </div>
                        <ul class="mb-0">
                            <li><strong>Club Meetings:</strong> 1-3 points/session (3 points if >10 members; 2 points for 5-10; 1 point <5)</li>
                            <li><strong>Events:</strong> 2-5 points/event (5 points if >15 members; 3 points for 10-15; 2 points <10)</li>
                            <li><strong>Competitions:</strong> 5-30 points (30 points for National; 20 points for Province/City; 10 points for School)</li>
                            <li><strong>Collaboration:</strong> 3-10 points (10 points main organizer; 5 points participant; 3 points support)</li>
                            <li><strong>Plans:</strong> 10 points if completed on time</li>
                        </ul>
                    </div>

                    <!-- Info Box -->
                    <div class="alert alert-info bg-info bg-opacity-10 border-0">
                        <div class="d-flex">
                            <i data-lucide="alert-circle" style="width: 18px; height: 18px; margin-right: 10px; color: #0d6efd; flex-shrink: 0; margin-top: 2px;"></i>
                            <div>
                                <strong>Important Notes:</strong>
                                <ul class="mb-0 mt-2 ms-2">
                                    <li>📅 <strong>Date:</strong> Defaults to today</li>
                                    <li>🔄 <strong>Cumulative:</strong> Allows multiple entries for the same criterion</li>
                                    <li>⚖️ <strong>Limit:</strong> According to the criterion's Max score</li>
                                    <li>📝 <strong>Note:</strong> Required for audit (visible in details)</li>
                                </ul>
                            </div>
                        </div>
                    </div>

                    <hr class="my-4">

                    <!-- Form Actions -->
                    <div class="d-flex justify-content-between align-items-center">
                        <a href="/Admin/ClubScoring/Detail?clubId=@Model.ClubId&semesterId=@Model.SemesterId&month=@Model.Month" class="btn btn-outline-secondary">
                            <i data-lucide="x" style="width: 16px; height: 16px;"></i>
                            Cancel
                        </a>
                        <button type="submit" class="btn btn-warning btn-lg fw-bold">
                            <i data-lucide="check-circle" style="width: 18px; height: 18px;"></i>
                            Confirm Score
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // All criteria data from server
        @{
                var jsonOptions = new System.Text.Json.JsonSerializerOptions
                {
                        PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
                };
        }
        const allCriteria = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AllCriteria, jsonOptions));

        document.addEventListener('DOMContentLoaded', function() {
            if (typeof lucide !== 'undefined') lucide.createIcons();
        });

        function updateCriteriaDropdown() {
            const groupSelect = document.getElementById('GroupId');
            const criterionSelect = document.getElementById('CriterionId');
            const criterionHint = document.getElementById('criterionHint');
            const rangeHint = document.getElementById('rangeHint');
            const scoreInput = document.getElementById('scoreInput');
            const selectedGroupId = parseInt(groupSelect.value);

            criterionSelect.innerHTML = '<option value="">-- Select Criterion --</option>';

            if (selectedGroupId) {
                const filteredCriteria = allCriteria.filter(c => {
                    const criterionGroupId = parseInt(c.groupId || c.GroupId || 0);
                    return criterionGroupId === selectedGroupId;
                });

                filteredCriteria.forEach(criterion => {
                    const option = document.createElement('option');
                    const criterionId = criterion.id || criterion.Id;
                    const maxScore = criterion.maxScore || criterion.MaxScore;
                    const minScore = criterion.minScore ?? criterion.MinScore ?? 0;
                    const title = criterion.title || criterion.Title;

                    option.value = criterionId;
                    option.setAttribute('data-max', maxScore);
                    option.setAttribute('data-min', minScore);
                    option.textContent = minScore > 0 ? `${title} (Min: ${minScore} - Max: ${maxScore})` : `${title} (Max: ${maxScore} points)`;
                    criterionSelect.appendChild(option);
                });

                criterionSelect.disabled = false;
                criterionHint.innerHTML = `<i data-lucide="info" style="width: 14px; height: 14px;"></i> Loaded ${filteredCriteria.length} criteria for this category`;

                rangeHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Select a criterion to view score range';
                updateScoreHint();
                validateScore();
            } else {
                criterionSelect.disabled = true;
                criterionSelect.innerHTML = '<option value="">-- Select a category first --</option>';
                criterionHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Criteria will appear after selecting a category';
                rangeHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Select a category and criterion to view limits';
            }
            if (typeof lucide !== 'undefined') lucide.createIcons();
        }

        function updateScoreHint() {
            const criterionSelect = document.getElementById('CriterionId');
            const rangeHint = document.getElementById('rangeHint');
            const scoreInput = document.getElementById('scoreInput');
            const selectedOption = criterionSelect.options[criterionSelect.selectedIndex];

            if (criterionSelect.value) {
                const criterionMaxScore = selectedOption.getAttribute('data-max');
                const criterionMinScore = selectedOption.getAttribute('data-min');
                if (criterionMinScore && parseInt(criterionMinScore) > 0) {
                    rangeHint.innerHTML = `<i data-lucide="info" style="width: 14px; height: 14px;"></i> Score range: ${criterionMinScore} - ${criterionMaxScore} points/session`;
                    scoreInput.setAttribute('min', criterionMinScore);
                    scoreInput.setAttribute('max', criterionMaxScore);
                } else {
                    rangeHint.innerHTML = `<i data-lucide="info" style="width: 14px; height: 14px;"></i> Criterion max limit: ${criterionMaxScore} points/session`;
                    scoreInput.setAttribute('min', '0');
                    scoreInput.setAttribute('max', criterionMaxScore);
                }
            } else {
                rangeHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Select a criterion to view limits';
            }
        }

        function validateScore() {
            const criterionSelect = document.getElementById('CriterionId');
            const scoreInput = document.getElementById('scoreInput');
            const rangeHint = document.getElementById('rangeHint');

            if (criterionSelect.value && scoreInput.value) {
                const selectedOption = criterionSelect.options[criterionSelect.selectedIndex];
                const criterionMaxScore = parseFloat(selectedOption.getAttribute('data-max'));
                const criterionMinScore = parseFloat(selectedOption.getAttribute('data-min'));
                const inputScore = parseFloat(scoreInput.value);

                if (!isNaN(criterionMinScore) && criterionMinScore > 0 && inputScore < criterionMinScore) {
                    rangeHint.innerHTML = `<i data-lucide="alert-circle" style="width: 14px; height: 14px; color: red;"></i> <span style="color: red;">Error: Input score (${inputScore}) below minimum (${criterionMinScore})</span>`;
                    scoreInput.classList.add('is-invalid');
                    return false;
                } else if (inputScore > criterionMaxScore) {
                    rangeHint.innerHTML = `<i data-lucide="alert-circle" style="width: 14px; height: 14px; color: red;"></i> <span style="color: red;">Error: Input score (${inputScore}) exceeds max limit (${criterionMaxScore})</span>`;
                    scoreInput.classList.add('is-invalid');
                    return false;
                } else {
                    updateScoreHint();
                    scoreInput.classList.remove('is-invalid');
                    return true;
                }
            }
            return true;
        }

        document.addEventListener('DOMContentLoaded', function() {
            const scoreInput = document.getElementById('scoreInput');
            if (scoreInput) {
                scoreInput.addEventListener('input', validateScore);
                scoreInput.addEventListener('blur', validateScore);
            }
        });
    </script>
}

<style>
    .page-header {
        padding-bottom: 1rem;
        border-bottom: 1px solid #e5e7eb;
    }

    .card {
        transition: all 0.3s ease;
    }

    .is-invalid {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.2rem rgba(220,53,69,.25) !important;
    }

    .validation-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .validation-success {
        color: #28a745;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .form-label {
        margin-bottom: 0.5rem;
    }

    .alert ul {
        padding-left: 1rem;
    }

    .alert li {
        margin-bottom: 0.5rem;
    }
</style>
