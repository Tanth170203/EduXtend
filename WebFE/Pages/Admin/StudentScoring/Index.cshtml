@page
@using BusinessObject.DTOs.MovementRecord
@model WebFE.Pages.Admin.StudentScoring.IndexModel
@{
    ViewData["Title"] = "Student Scoring";
    ViewData["Breadcrumb"] = "Student Scoring";
    Layout = "~/Pages/Shared/_AdminLayout.cshtml";
}

<!-- Page Header -->
<div class="page-header">
    <div class="d-flex align-items-center justify-content-between flex-wrap gap-3">
        <div>
            <h1 class="page-title">
                <i data-lucide="users" style="width: 28px; height: 28px; display: inline-block; vertical-align: middle; margin-right: 0.5rem;"></i>
                Student Scoring
            </h1>
            <p class="page-description">Manage and score student activities</p>
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-success" onclick="exportToExcel()">
                <i data-lucide="download" style="width: 16px; height: 16px;"></i>
                Export to Excel
            </button>
            <button type="button" class="btn btn-primary" onclick="printReport()">
                <i data-lucide="printer" style="width: 16px; height: 16px;"></i>
                Print Report
            </button>
        </div>
    </div>
</div>

<!-- Alert Messages -->
@if (!string.IsNullOrEmpty(Model.SuccessMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i data-lucide="check-circle" style="width: 16px; height: 16px; display: inline-block; vertical-align: middle; margin-right: 0.5rem;"></i>
        @Model.SuccessMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i data-lucide="alert-circle" style="width: 16px; height: 16px; display: inline-block; vertical-align: middle; margin-right: 0.5rem;"></i>
        @Model.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Statistics Cards -->
<div class="row g-3 mb-4">
    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <p class="text-muted mb-1 small">Total students</p>
                        <h3 class="mb-0 fw-bold">@Model.Records.Count</h3>
                        <small class="text-success">
                            <i data-lucide="trending-up" style="width: 12px; height: 12px;"></i>
                            @(Model.SelectedSemesterId.HasValue ? "In selected semester" : "All semesters")
                        </small>
                    </div>
                    <div class="rounded-circle bg-primary bg-opacity-10 p-3">
                        <i data-lucide="users" style="width: 32px; height: 32px; color: #0d6efd;"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <p class="text-muted mb-1 small">Average score</p>
                        <h3 class="mb-0 fw-bold text-success">
                            @(Model.Records.Any() ? Model.Records.Average(r => r.TotalScore).ToString("F1") : "0")
                        </h3>
                        <small class="text-muted">/ 100 points</small>
                    </div>
                    <div class="rounded-circle bg-success bg-opacity-10 p-3">
                        <i data-lucide="trending-up" style="width: 32px; height: 32px; color: #198754;"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <p class="text-muted mb-1 small">Highest score</p>
                        <h3 class="mb-0 fw-bold text-warning">
                            @(Model.Records.Any() ? Model.Records.Max(r => r.TotalScore).ToString("F1") : "0")
                        </h3>
                        <small class="text-muted">Top 1 scorer</small>
                    </div>
                    <div class="rounded-circle bg-warning bg-opacity-10 p-3">
                        <i data-lucide="trophy" style="width: 32px; height: 32px; color: #ffc107;"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <p class="text-muted mb-1 small">Excellent (â‰¥80)</p>
                        <h3 class="mb-0 fw-bold text-info">
                            @Model.Records.Count(r => r.TotalScore >= 80)
                        </h3>
                        <small class="text-muted">
                            @(Model.Records.Any() ? ((double)Model.Records.Count(r => r.TotalScore >= 80) / Model.Records.Count * 100).ToString("F1") : "0")%
                        </small>
                    </div>
                    <div class="rounded-circle bg-info bg-opacity-10 p-3">
                        <i data-lucide="award" style="width: 32px; height: 32px; color: #0dcaf0;"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Filter Section -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-body">
        <form method="get" class="row g-3 align-items-end">
            <div class="col-md-4">
                <label for="semesterSelect" class="form-label fw-semibold">
                    <i data-lucide="filter" style="width: 14px; height: 14px;"></i>
                    Filter by semester
                </label>
                <select class="form-select" id="semesterSelect" name="semesterId" onchange="this.form.submit()">
                    <option value="">ðŸ“š All semesters</option>
                    @foreach (var semester in Model.Semesters)
                    {
                        <option value="@semester.Id" selected="@(Model.SelectedSemesterId == semester.Id)">
                            @semester.Name
                            (@semester.StartDate.ToString("MM/yyyy") - @semester.EndDate.ToString("MM/yyyy"))
                            @(semester.IsActive ? "âœ“ Active" : "")
                        </option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold">
                    <i data-lucide="search" style="width: 14px; height: 14px;"></i>
                    Search
                </label>
                <input type="text" class="form-control" id="searchInput" placeholder="Name or student code...">
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold">Sort</label>
                <select class="form-select" id="sortSelect">
                    <option value="score-desc">Score high â†’ low</option>
                    <option value="score-asc">Score low â†’ high</option>
                    <option value="name-asc">Name A â†’ Z</option>
                    <option value="name-desc">Name Z â†’ A</option>
                </select>
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-outline-secondary w-100" onclick="resetFilters()">
                    <i data-lucide="x-circle" style="width: 14px; height: 14px;"></i>
                    Reset
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Records Table -->
<div class="card border-0 shadow-sm">
    <div class="card-header bg-white py-3">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0 fw-semibold">
                <i data-lucide="list" style="width: 18px; height: 18px;"></i>
                Activity Scoring List
            </h5>
            <span class="badge bg-primary">@(Model.Records.Count) students</span>
        </div>
    </div>
    <div class="card-body p-0">
        @if (Model.Records.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0" id="recordsTable">
                    <thead class="table-light">
                        <tr>
                            <th class="ps-4" style="width: 60px;">#</th>
                            <th style="width: 80px;">Rank</th>
                            <th>Student</th>
                            <th>Student Code</th>
                            <th class="text-center">Total Score</th>
                            <th class="text-center">Last Updated</th>
                            <th class="text-center pe-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int rank = 1;
                            string previousScore = "";
                            int displayRank = 1;
                        }
                        @foreach (var record in Model.Records)
                        {
                            var currentScore = record.TotalScore.ToString("F1");
                            if (currentScore != previousScore)
                            {
                                displayRank = rank;
                                previousScore = currentScore;
                            }

                            var scoreClass = record.TotalScore >= 80 ? "success" : record.TotalScore >= 60 ? "warning" : "danger";
                            var evaluation = record.TotalScore >= 80 ? "Excellent" : record.TotalScore >= 60 ? "Good" : "Needs Improvement";
                            var medalIcon = displayRank == 1 ? "ðŸ¥‡" : displayRank == 2 ? "ðŸ¥ˆ" : displayRank == 3 ? "ðŸ¥‰" : "";

                            <tr class="record-row">
                                <td class="ps-4 text-muted">@rank</td>
                                <td>
                                    @if (displayRank <= 3)
                                    {
                                        <span class="badge bg-warning text-dark px-3 py-2">
                                            @medalIcon #@displayRank
                                        </span>
                                    }
                                    else if (displayRank <= 10)
                                    {
                                        <span class="badge bg-info px-3 py-2">#@displayRank</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">#@displayRank</span>
                                    }
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-circle me-2">
                                            @(string.IsNullOrEmpty(record.StudentName) ? "?" : record.StudentName.Substring(0, 1).ToUpper())
                                        </div>
                                        <strong>@record.StudentName</strong>
                                    </div>
                                </td>
                                <td><code>@record.StudentCode</code></td>
                                <td class="text-center">
                                    <div class="score-display">
                                        <strong class="fs-5 text-@scoreClass">@record.TotalScore.ToString("F1")</strong>
                                        <small class="text-muted d-block">/100</small>
                                    </div>
                                </td>
                                <td class="text-center">
                                    <small class="text-muted">
                                        @(record.LastUpdated?.ToString("dd/MM/yyyy") ?? record.CreatedAt.ToString("dd/MM/yyyy"))
                                    </small>
                                </td>
                                <td class="text-center pe-4">
                                    <div class="btn-group btn-group-sm">
                                        <a href="/Admin/StudentScoring/Detail?id=@record.Id"
                                           class="btn btn-sm btn-outline-primary"
                                           title="Details">
                                            <i data-lucide="external-link" style="width: 14px; height: 14px;"></i> Details
                                        </a>
                                    </div>
                                </td>
                            </tr>
                            rank++;
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i data-lucide="inbox" style="width: 64px; height: 64px; color: #9ca3af;"></i>
                <p class="text-muted mt-3 mb-0">No activity scoring data yet</p>
                <p class="text-muted">
                    @(Model.SelectedSemesterId.HasValue ? "No students found in this semester" : "The system has no data yet")
                </p>
            </div>
        }
    </div>
</div>

<style>
    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
    }

    .score-display {
        padding: 8px;
        border-radius: 8px;
        background: #f8f9fa;
    }

    .record-row:hover {
        background-color: #f8f9fa;
        cursor: pointer;
    }

    .card {
        transition: all 0.3s ease;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
        }
</style>

@section Scripts {
    <script>
        (function(){ if (window.lucide && typeof lucide.createIcons==='function'){ try{ lucide.createIcons(lucide.icons||{});}catch{}} })();

        const table = document.getElementById('recordsTable');
        const tbody = table ? table.querySelector('tbody') : null;
        const searchInput = document.getElementById('searchInput');
        const sortSelect = document.getElementById('sortSelect');

        function getRowData(tr){
            const tds = tr.querySelectorAll('td');
            const name = (tds[2]?.innerText || '').trim().toLowerCase();
            const code = (tds[3]?.innerText || '').trim().toLowerCase();
            const scoreText = (tds[4]?.querySelector('strong')?.innerText || '0').replace(',', '.');
            const score = parseFloat(scoreText) || 0;
            return { tr, name, code, score };
        }

        function filterRows(){
            if (!tbody) return;
            const term = (searchInput?.value || '').trim().toLowerCase();
            [...tbody.querySelectorAll('tr')].forEach(tr => {
                const { name, code } = getRowData(tr);
                const visible = !term || name.includes(term) || code.includes(term);
                tr.style.display = visible ? '' : 'none';
            });
        }

        function sortRows(){
            if (!tbody) return;
            const mode = sortSelect?.value || 'score-desc';
            const rows = [...tbody.querySelectorAll('tr')].map(getRowData);

            rows.sort((a, b) => {
                switch(mode){
                    case 'score-asc': return a.score - b.score;
                    case 'name-asc': return a.name.localeCompare(b.name);
                    case 'name-desc': return b.name.localeCompare(a.name);
                    case 'score-desc':
                    default: return b.score - a.score;
                }
            });
            rows.forEach(r => tbody.appendChild(r.tr));
        }

        function resetFilters(){
            if (searchInput) searchInput.value = '';
            if (sortSelect) sortSelect.value = 'score-desc';
            filterRows();
            sortRows();
        }

        // Bind events
        if (searchInput) searchInput.addEventListener('input', filterRows);
        if (sortSelect) sortSelect.addEventListener('change', () => { sortRows(); filterRows(); });

        // Expose reset for header button
        window.resetFilters = resetFilters;

        // Initial run
        document.addEventListener('DOMContentLoaded', () => { sortRows(); filterRows(); });

        //Export
        async function exportToExcel() {
            try {
                const semesterSelect = document.getElementById('semesterSelect');
                const semesterId = semesterSelect ? semesterSelect.value : '';
                if (!semesterId) {
                    alert('Please select a semester before exporting to Excel.');
                    return;
                }
                const baseUrl = '@(Model.BaseApiUrl ?? "https://localhost:5001")';
                const url = `${baseUrl}/api/reports/student-semester?semesterId=${encodeURIComponent(semesterId)}`;
                window.location.href = url;
            } catch (e) {
                console.error('Export error', e);
                alert('Unable to export Excel.');
            }
        }

        function printReport() {
            window.print();
        }
    </script>
}
