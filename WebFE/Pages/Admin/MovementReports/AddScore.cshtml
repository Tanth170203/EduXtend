@page
@model WebFE.Pages.Admin.MovementReports.AddScoreModel
@{
    ViewData["Title"] = "C·ªông ƒêi·ªÉm Phong Tr√†o";
    ViewData["Breadcrumb"] = "C·ªông ƒêi·ªÉm";
    Layout = "~/Pages/Shared/_AdminLayout.cshtml";
}

<!-- Page Header -->
<div class="page-header mb-4">
    <div class="d-flex align-items-center justify-content-between flex-wrap gap-3">
        <div>
            <h1 class="page-title">
                <i data-lucide="plus-circle" style="width: 28px; height: 28px; display: inline-block; vertical-align: middle; margin-right: 0.5rem;"></i>
                C·ªông ƒêi·ªÉm Phong Tr√†o
            </h1>
            <p class="page-description">Th√™m ƒëi·ªÉm phong tr√†o cho sinh vi√™n</p>
        </div>
        <div>
            <a href="/Admin/MovementReports" class="btn btn-outline-secondary">
                <i data-lucide="arrow-left" style="width: 16px; height: 16px;"></i>
                Quay l·∫°i
            </a>
        </div>
    </div>
</div>

<!-- Alert Messages -->
@if (!string.IsNullOrEmpty(Model.SuccessMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i data-lucide="check-circle" style="width: 16px; height: 16px; display: inline-block; vertical-align: middle; margin-right: 0.5rem;"></i>
        @Model.SuccessMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i data-lucide="alert-circle" style="width: 16px; height: 16px; display: inline-block; vertical-align: middle; margin-right: 0.5rem;"></i>
        @Model.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Add Score Form Card -->
<div class="row justify-content-center">
    <div class="col-lg-8">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-warning text-dark">
                <h5 class="mb-0 fw-semibold">
                    <i data-lucide="edit-3" style="width: 20px; height: 20px;"></i>
                    Th√¥ng tin c·ªông ƒëi·ªÉm
                </h5>
            </div>
            <div class="card-body p-4">
                <form method="post">
                    
                    <!-- Student Selection -->
                    <div class="mb-4">
                        <label for="StudentId" class="form-label fw-semibold">
                            <i data-lucide="users" style="width: 16px; height: 16px; margin-right: 6px;"></i>
                            Sinh vi√™n <span class="text-danger">*</span>
                        </label>
                        <select asp-for="StudentId" class="form-select form-select-lg" id="StudentId" required onchange="updateStudentDisplay()">
                            <option value="">-- Ch·ªçn sinh vi√™n --</option>
                            @foreach (var student in Model.Students)
                            {
                                var displayName = string.IsNullOrEmpty(student.FullName) ? "Kh√¥ng r√µ t√™n" : student.FullName;
                                var displayCode = student.StudentCode ?? "N/A";
                                <option value="@student.Id" selected="@(Model.PreSelectedStudentId == student.Id)">
                                    @displayName (@displayCode)
                                </option>
                            }
                        </select>
                        <small class="text-muted d-block mt-2">
                            <i data-lucide="info" style="width: 14px; height: 14px;"></i>
                            Ch·ªçn sinh vi√™n c·∫ßn c·ªông ƒëi·ªÉm
                        </small>
                    </div>

                    <!-- Selected Student Info Display -->
                    <div id="studentInfoBox" class="alert alert-light border border-info @(Model.PreSelectedStudentId.HasValue ? "" : "d-none") mb-4">
                        <div class="d-flex align-items-center">
                            <div class="rounded-circle bg-info bg-opacity-10 p-2 me-3">
                                <i data-lucide="user-check" style="width: 24px; height: 24px; color: #0d6efd;"></i>
                            </div>
                            <div>
                                <h6 class="mb-1 fw-semibold" id="studentNameDisplay">
                                    @(Model.PreSelectedStudentName ?? "Ch∆∞a ch·ªçn sinh vi√™n")
                                </h6>
                                <small class="text-muted" id="studentCodeDisplay">
                                    M√£ SV: @(Model.PreSelectedStudentCode ?? "---")
                                </small>
                            </div>
                        </div>
                    </div>

                    <hr class="my-4">

                    <!-- Group Selection -->
                    <div class="mb-4">
                        <label for="GroupId" class="form-label fw-semibold">
                            <i data-lucide="folder" style="width: 16px; height: 16px; margin-right: 6px;"></i>
                            Danh m·ª•c <span class="text-danger">*</span>
                        </label>
                        <select asp-for="GroupId" class="form-select form-select-lg" id="GroupId" required onchange="updateCriteriaDropdown()">
                            <option value="">-- Ch·ªçn danh m·ª•c --</option>
                            @foreach (var group in Model.Groups)
                            {
                                <option value="@group.Id" data-max="@group.MaxScore">
                                    @group.Name (Max: @group.MaxScore ƒëi·ªÉm)
                                </option>
                            }
                        </select>
                        <small class="text-muted d-block mt-2">
                            <i data-lucide="info" style="width: 14px; height: 14px;"></i>
                            Ch·ªçn danh m·ª•c tr∆∞·ªõc, sau ƒë√≥ ch·ªçn ti√™u ch√≠ c·ª• th·ªÉ
                        </small>
                    </div>

                    <!-- Criterion Selection (dependent on Group) -->
                    <div class="mb-4">
                        <label for="CriterionId" class="form-label fw-semibold">
                            <i data-lucide="list" style="width: 16px; height: 16px; margin-right: 6px;"></i>
                            Ti√™u ch√≠ <span class="text-danger">*</span>
                        </label>
                        <select asp-for="CriterionId" class="form-select form-select-lg" id="CriterionId" required disabled onchange="updateScoreHint()">
                            <option value="">-- Ch·ªçn danh m·ª•c tr∆∞·ªõc --</option>
                        </select>
                        <small class="text-muted d-block mt-2" id="criterionHint">
                            <i data-lucide="info" style="width: 14px; height: 14px;"></i>
                            Ti√™u ch√≠ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã sau khi ch·ªçn danh m·ª•c
                        </small>
                    </div>

                    <!-- Score Input -->
                    <div class="mb-4">
                        <label for="Score" class="form-label fw-semibold">
                            <i data-lucide="award" style="width: 16px; height: 16px; margin-right: 6px;"></i>
                            ƒêi·ªÉm <span class="text-danger">*</span>
                        </label>
                        <input asp-for="Score" type="number" class="form-control" id="Score" min="0" max="100" step="0.5" placeholder="Nh·∫≠p ƒëi·ªÉm (VD: 5, 10, 15)" required>
                        <small class="text-muted d-block mt-2" id="scoreHint">
                            <i data-lucide="info" style="width: 14px; height: 14px;"></i>
                            Ph·∫°m vi: 0 - 100 (s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh n·∫øu v∆∞·ª£t max danh m·ª•c)
                        </small>
                    </div>

                    <!-- Comments field removed - not stored in database -->

                    <!-- Info Box -->
                    <div class="alert alert-info bg-info bg-opacity-10 border-0">
                        <div class="d-flex">
                            <i data-lucide="alert-circle" style="width: 18px; height: 18px; margin-right: 10px; color: #0d6efd; flex-shrink: 0; margin-top: 2px;"></i>
                            <div>
                                <strong>L∆∞u √Ω quan tr·ªçng:</strong>
                                <ul class="mb-0 mt-2 ms-2">
                                    <li>üìÖ <strong>Ng√†y th·ª±c hi·ªán:</strong> M·∫∑c ƒë·ªãnh l√† ng√†y h√¥m nay</li>
                                    <li>üéØ <strong>Ch·ªçn danh m·ª•c:</strong> Ch·ªçn danh m·ª•c tr∆∞·ªõc, sau ƒë√≥ ch·ªçn ti√™u ch√≠ c·ª• th·ªÉ</li>
                                    <li>üîÑ <strong>C·ªông d·ªìn:</strong> C√°c ti√™u ch√≠ kh√°c nhau trong c√πng danh m·ª•c s·∫Ω ƒë∆∞·ª£c c·ªông d·ªìn</li>
                                    <li>üîÑ <strong>C·∫≠p nh·∫≠t:</strong> C√πng ti√™u ch√≠ s·∫Ω c·∫≠p nh·∫≠t ƒëi·ªÉm thay v√¨ t·∫°o m·ªõi</li>
                                    <li>‚ö†Ô∏è <strong>T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh:</strong> N·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n ti√™u ch√≠, ƒëi·ªÉm s·∫Ω ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh v·ªÅ max</li>
                                    <li>üéì <strong>Ch·ªâ cho sinh vi√™n:</strong> Ch·ªâ hi·ªÉn th·ªã danh m·ª•c v√† ti√™u ch√≠ d√†nh cho sinh vi√™n</li>
                                    <!-- Comments requirement removed - field not stored in database -->
                                </ul>
                            </div>
                        </div>
                    </div>

                    <hr class="my-4">

                    <!-- Form Actions -->
                    <div class="d-flex justify-content-between align-items-center">
                        <a href="/Admin/MovementReports" class="btn btn-outline-secondary">
                            <i data-lucide="x" style="width: 16px; height: 16px;"></i>
                            H·ªßy
                        </a>
                        <button type="submit" class="btn btn-warning btn-lg fw-bold">
                            <i data-lucide="check-circle" style="width: 18px; height: 18px;"></i>
                            X√°c nh·∫≠n c·ªông ƒëi·ªÉm
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // All criteria data from server
        const allCriteria = @Html.Raw(Json.Serialize(Model.AllCriteria));

        document.addEventListener('DOMContentLoaded', function() {
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        });

        function updateStudentDisplay() {
            const studentSelect = document.getElementById('StudentId');
            const selectedOption = studentSelect.options[studentSelect.selectedIndex];
            const studentInfoBox = document.getElementById('studentInfoBox');
            
            if (studentSelect.value) {
                const fullText = selectedOption.textContent;
                const match = fullText.match(/\(([^)]+)\)/);
                const code = match ? match[1] : 'N/A';
                const name = fullText.replace(/\s*\([^)]*\)/, '').trim();
                
                document.getElementById('studentNameDisplay').textContent = name;
                document.getElementById('studentCodeDisplay').textContent = 'M√£ SV: ' + code;
                studentInfoBox.classList.remove('d-none');
            } else {
                studentInfoBox.classList.add('d-none');
            }

            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        }

        function updateCriteriaDropdown() {
            const groupSelect = document.getElementById('GroupId');
            const criterionSelect = document.getElementById('CriterionId');
            const criterionHint = document.getElementById('criterionHint');
            const scoreHint = document.getElementById('scoreHint');
            const selectedGroupId = parseInt(groupSelect.value);
            
            // Clear current options
            criterionSelect.innerHTML = '<option value="">-- Ch·ªçn ti√™u ch√≠ --</option>';
            
            if (selectedGroupId) {
                // Filter criteria by selected group
                const filteredCriteria = allCriteria.filter(c => c.groupId === selectedGroupId);
                
                if (filteredCriteria.length > 0) {
                    // Add filtered criteria to dropdown
                    filteredCriteria.forEach(criterion => {
                        const option = document.createElement('option');
                        option.value = criterion.id;
                        option.setAttribute('data-max', criterion.maxScore);
                        option.textContent = `${criterion.title} (Max: ${criterion.maxScore} ƒëi·ªÉm)`;
                        criterionSelect.appendChild(option);
                    });
                    
                    criterionSelect.disabled = false;
                    criterionHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> ƒê√£ t·∫£i ' + filteredCriteria.length + ' ti√™u ch√≠ cho danh m·ª•c n√†y';
                } else {
                    criterionSelect.disabled = true;
                    criterionHint.innerHTML = '<i data-lucide="alert-circle" style="width: 14px; height: 14px;"></i> Danh m·ª•c n√†y ch∆∞a c√≥ ti√™u ch√≠ n√†o';
                }

                // Update criterion max score hint (s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi ch·ªçn criterion)
                scoreHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Ch·ªçn ti√™u ch√≠ ƒë·ªÉ xem gi·ªõi h·∫°n c·ª• th·ªÉ';
                
                // Reset score hint and validate current score
                updateScoreHint();
                validateScore();
            } else {
                criterionSelect.disabled = true;
                criterionSelect.innerHTML = '<option value="">-- Ch·ªçn danh m·ª•c tr∆∞·ªõc --</option>';
                criterionHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Ti√™u ch√≠ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã sau khi ch·ªçn danh m·ª•c';
                scoreHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Ph·∫°m vi: 0 - 100 (b√°o l·ªói n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n ti√™u ch√≠ ho·∫∑c nh√≥m)';
            }

            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        }

        function updateScoreHint() {
            const criterionSelect = document.getElementById('CriterionId');
            const scoreHint = document.getElementById('scoreHint');
            const selectedOption = criterionSelect.options[criterionSelect.selectedIndex];
            
            if (criterionSelect.value) {
                const criterionMaxScore = selectedOption.getAttribute('data-max');
                scoreHint.innerHTML = `<i data-lucide="info" style="width: 14px; height: 14px;"></i> Gi·ªõi h·∫°n ti√™u ch√≠: ${criterionMaxScore} ƒëi·ªÉm/l·∫ßn (b√°o l·ªói n·∫øu v∆∞·ª£t qu√°)`;
            } else {
                scoreHint.innerHTML = '<i data-lucide="info" style="width: 14px; height: 14px;"></i> Ch·ªçn ti√™u ch√≠ ƒë·ªÉ xem gi·ªõi h·∫°n c·ª• th·ªÉ';
            }
        }

        // FIXED: Th√™m validation ngay tr√™n frontend ƒë·ªÉ t·ªëi ∆∞u UX
        function validateScore() {
            const criterionSelect = document.getElementById('CriterionId');
            const scoreInput = document.getElementById('Score');
            const scoreHint = document.getElementById('scoreHint');
            
            if (criterionSelect.value && scoreInput.value) {
                const selectedOption = criterionSelect.options[criterionSelect.selectedIndex];
                const criterionMaxScore = parseFloat(selectedOption.getAttribute('data-max'));
                const inputScore = parseFloat(scoreInput.value);
                
                if (inputScore > criterionMaxScore) {
                    scoreHint.innerHTML = `<i data-lucide="alert-circle" style="width: 14px; height: 14px; color: red;"></i> <span style="color: red;">L·ªói: ƒêi·ªÉm nh·∫≠p (${inputScore}) v∆∞·ª£t qu√° gi·ªõi h·∫°n ti√™u ch√≠ (${criterionMaxScore} ƒëi·ªÉm)</span>`;
                    scoreInput.classList.add('is-invalid');
                    return false;
                } else {
                    scoreHint.innerHTML = `<i data-lucide="check-circle" style="width: 14px; height: 14px; color: green;"></i> <span style="color: green;">ƒêi·ªÉm h·ª£p l·ªá</span>`;
                    scoreInput.classList.remove('is-invalid');
                    return true;
                }
            }
            return true;
        }

        // Add event listener for real-time validation
        document.addEventListener('DOMContentLoaded', function() {
            const scoreInput = document.getElementById('Score');
            if (scoreInput) {
                scoreInput.addEventListener('input', validateScore);
                scoreInput.addEventListener('blur', validateScore);
            }
        });
    </script>
}

<style>
    .page-header {
        padding-bottom: 1rem;
        border-bottom: 1px solid #e5e7eb;
    }

    .card {
        transition: all 0.3s ease;
    }

    /* FIXED: CSS cho validation */
    .is-invalid {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
    }

    .validation-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .validation-success {
        color: #28a745;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .form-label {
        margin-bottom: 0.5rem;
    }

    .alert ul {
        padding-left: 1rem;
    }

    .alert li {
        margin-bottom: 0.5rem;
    }
</style>

