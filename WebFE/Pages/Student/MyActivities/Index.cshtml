@page "/MyActivities"
@model WebFE.Pages.Student.MyActivities.IndexModel
@{
    ViewData["Title"] = "My Activities";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="container my-5">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col">
            <h2 class="fw-bold mb-2">
                <i class="bi bi-calendar-check text-primary"></i> My Activities
            </h2>
            <p class="text-muted">Track all your registered activities and submit feedback</p>
        </div>
    </div>

    @if (Model.Items == null || Model.Items.Count == 0)
    {
        <!-- Empty State -->
        <div class="text-center py-5">
            <div class="mb-4">
                <i class="bi bi-calendar-x" style="font-size: 5rem; color: #e0e0e0;"></i>
            </div>
            <h4 class="text-muted mb-3">No activities yet</h4>
            <p class="text-muted mb-4">You haven't registered for any activities. Start exploring!</p>
            <a asp-page="/Activities/Index" class="btn btn-primary">
                <i class="bi bi-search"></i> Browse Activities
            </a>
        </div>
    }
    else
    {
        var currentTime = DateTime.Now;
        
        <!-- Statistics Cards -->
        <div class="row g-3 mb-4">
            @{
                var totalActivities = Model.Items.Count;
                var completedActivities = Model.Items.Count(i => i.EndTime < currentTime);
                var upcomingActivities = Model.Items.Count(i => i.StartTime > currentTime);
                var ongoingActivities = Model.Items.Count(i => i.StartTime <= currentTime && currentTime <= i.EndTime);
                var attendedActivities = Model.Items.Count(i => i.HasAttended);
            }
            
            <div class="col-md-3 col-sm-6">
                <div class="stat-card card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="stat-icon bg-primary bg-opacity-10 text-primary rounded-circle p-3 me-3">
                                <i class="bi bi-calendar-check fs-4"></i>
                            </div>
                            <div>
                                <h3 class="mb-0 fw-bold">@totalActivities</h3>
                                <small class="text-muted">Total Registered</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3 col-sm-6">
                <div class="stat-card card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="stat-icon bg-warning bg-opacity-10 text-warning rounded-circle p-3 me-3">
                                <i class="bi bi-clock-history fs-4"></i>
                            </div>
                            <div>
                                <h3 class="mb-0 fw-bold">@upcomingActivities</h3>
                                <small class="text-muted">Upcoming</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3 col-sm-6">
                <div class="stat-card card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="stat-icon bg-info bg-opacity-10 text-info rounded-circle p-3 me-3">
                                <i class="bi bi-play-circle fs-4"></i>
                            </div>
                            <div>
                                <h3 class="mb-0 fw-bold">@ongoingActivities</h3>
                                <small class="text-muted">Ongoing</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3 col-sm-6">
                <div class="stat-card card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="stat-icon bg-success bg-opacity-10 text-success rounded-circle p-3 me-3">
                                <i class="bi bi-patch-check fs-4"></i>
                            </div>
                            <div>
                                <h3 class="mb-0 fw-bold">@attendedActivities</h3>
                                <small class="text-muted">Attended</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Activities List -->
        <div class="row g-4">
            @foreach (var item in Model.Items.OrderByDescending(i => i.StartTime))
            {
                var isUpcoming = item.StartTime > currentTime;
                var isOngoing = item.StartTime <= currentTime && currentTime <= item.EndTime;
                var isCompleted = item.EndTime < currentTime;
                
                var statusBadge = isOngoing ? "badge bg-info" : 
                                 isUpcoming ? "badge bg-warning" : 
                                 "badge bg-secondary";
                var statusText = isOngoing ? "Ongoing" : 
                                isUpcoming ? "Upcoming" : 
                                "Completed";
                var statusIcon = isOngoing ? "bi-play-circle" : 
                                isUpcoming ? "bi-clock-history" : 
                                "bi-check-circle";

                <div class="col-lg-6">
                    <div class="activity-card card border-0 shadow-sm h-100 hover-lift">
                        @if (!string.IsNullOrWhiteSpace(item.ImageUrl))
                        {
                            <img src="@item.ImageUrl" class="card-img-top" style="height: 180px; object-fit: cover;" alt="@item.Title">
                        }
                        else
                        {
                            <div class="card-img-top bg-gradient-primary d-flex align-items-center justify-content-center text-white" style="height: 180px;">
                                <i class="bi bi-calendar-event" style="font-size: 3rem;"></i>
                            </div>
                        }
                        
                        <div class="card-body">
                            <!-- Status Badge -->
                            <div class="mb-2">
                                <span class="@statusBadge">
                                    <i class="bi @statusIcon"></i> @statusText
                                </span>
                                @if (item.HasAttended)
                                {
                                    <span class="badge bg-success ms-1">
                                        <i class="bi bi-person-check"></i> Attended
                                    </span>
                                }
                                @if (item.HasFeedback)
                                {
                                    <span class="badge bg-primary ms-1">
                                        <i class="bi bi-chat-left-text"></i> Reviewed
                                    </span>
                                }
                            </div>

                            <!-- Title -->
                            <h5 class="card-title fw-bold mb-2">@item.Title</h5>

                            <!-- Club Info -->
                            @if (!string.IsNullOrWhiteSpace(item.ClubName))
                            {
                                <p class="text-muted mb-2">
                                    <i class="bi bi-people-fill"></i> <strong>@item.ClubName</strong>
                                </p>
                            }

                            <!-- Date & Time -->
                            <div class="mb-3">
                                <div class="d-flex align-items-center text-muted mb-1">
                                    <i class="bi bi-calendar3 me-2"></i>
                                    <small>@item.StartTime.ToString("MMMM dd, yyyy")</small>
                                </div>
                                <div class="d-flex align-items-center text-muted">
                                    <i class="bi bi-clock me-2"></i>
                                    <small>@item.StartTime.ToString("HH:mm") - @item.EndTime.ToString("HH:mm")</small>
                                </div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="d-flex gap-2">
                                <a class="btn btn-outline-primary flex-fill" asp-page="/Activities/Details" asp-route-id="@item.Id">
                                    <i class="bi bi-eye"></i> View Details
                                </a>
                                @if (item.HasAttended)
                                {
                                    <button class="btn @(item.HasFeedback ? "btn-outline-success" : "btn-success") flex-fill" onclick="openFeedback(@item.Id)">
                                        <i class="bi bi-star"></i> @(item.HasFeedback ? "Edit Review" : "Review")
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Feedback Modal -->
<div class="modal fade" id="feedbackModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow">
      <div class="modal-header border-0 bg-light">
        <div>
          <h5 class="modal-title fw-bold mb-1">
            <i class="bi bi-star-fill text-warning"></i> Submit Feedback
          </h5>
          <small class="text-muted">Share your experience with this activity</small>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body p-4">
        <!-- Star Rating -->
        <div class="mb-4">
          <label class="form-label fw-semibold mb-3">How would you rate this activity?</label>
          <div class="star-rating d-flex justify-content-center gap-3 mb-3">
            <i class="bi bi-star-fill star-icon" data-rating="1" onclick="setRating(1)"></i>
            <i class="bi bi-star-fill star-icon" data-rating="2" onclick="setRating(2)"></i>
            <i class="bi bi-star-fill star-icon" data-rating="3" onclick="setRating(3)"></i>
            <i class="bi bi-star-fill star-icon" data-rating="4" onclick="setRating(4)"></i>
            <i class="bi bi-star-fill star-icon" data-rating="5" onclick="setRating(5)"></i>
          </div>
          <div class="text-center">
            <span id="ratingText" class="text-muted fw-semibold">Excellent</span>
          </div>
          <input type="hidden" id="fbRating" value="5">
        </div>

        <!-- Comment -->
        <div class="mb-3">
          <label class="form-label fw-semibold">Your comments (optional)</label>
          <textarea class="form-control" id="fbComment" rows="4" maxlength="500" 
                    placeholder="Share your thoughts about this activity..."></textarea>
          <div class="form-text text-end">
            <span id="charCount">0</span> / 500 characters
          </div>
        </div>
      </div>
      <div class="modal-footer border-0 bg-light">
        <button type="button" class="btn btn-light" data-bs-dismiss="modal">
          <i class="bi bi-x-circle"></i> Close
        </button>
        <button type="button" class="btn btn-primary" onclick="submitFeedback()">
          <i class="bi bi-send"></i> Submit
        </button>
      </div>
    </div>
  </div>
</div>

<style>
    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .hover-lift {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .hover-lift:hover {
        transform: translateY(-5px);
        box-shadow: 0 1rem 3rem rgba(0,0,0,0.175) !important;
    }
    
    .stat-card {
        transition: transform 0.2s ease;
    }
    
    .stat-card:hover {
        transform: translateY(-2px);
    }
    
    .star-icon {
        cursor: pointer;
        color: #d0d0d0;
        transition: all 0.2s ease;
        font-size: 2.5rem !important;
        text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    
    .star-icon:hover {
        transform: scale(1.15);
        color: #ffcd39;
    }
    
    .star-icon.active {
        color: #ffc107 !important;
    }
    
    .star-icon.bi-star-fill {
        color: #ffc107 !important;
        text-shadow: 0 2px 4px rgba(255,193,7,0.3);
    }
    
    .star-rating {
        padding: 10px 0;
    }
</style>

<script>
    let feedbackActivityId = 0;
    let currentRating = 5;

    // Initialize character counter
    document.addEventListener('DOMContentLoaded', function() {
        const commentBox = document.getElementById('fbComment');
        if (commentBox) {
            commentBox.addEventListener('input', function() {
                document.getElementById('charCount').textContent = this.value.length;
            });
        }
    });

    function setRating(rating) {
        currentRating = rating;
        document.getElementById('fbRating').value = rating;
        
        // Update star display
        const stars = document.querySelectorAll('.star-icon');
        stars.forEach((star, index) => {
            if (index < rating) {
                star.classList.remove('bi-star');
                star.classList.add('bi-star-fill', 'active');
            } else {
                star.classList.remove('bi-star-fill', 'active');
                star.classList.add('bi-star');
            }
        });
        
        // Update rating text
        const ratingTexts = ['', 'Poor', 'Fair', 'Good', 'Very Good', 'Excellent'];
        document.getElementById('ratingText').textContent = ratingTexts[rating];
    }

    async function openFeedback(id) {
        feedbackActivityId = id;
        
        // Reset form first
        document.getElementById('fbComment').value = '';
        document.getElementById('charCount').textContent = '0';
        
        // Set default 5 stars immediately
        setTimeout(() => setRating(5), 0);
        
        // Prefill existing feedback
        try {
            const baseUrl = '@Model.ApiBaseUrl';
            const url = (baseUrl ? baseUrl : '') + `/api/activity/${id}/my-feedback`;
            const res = await fetch(url, { credentials: 'include' });
            if (res.ok) {
                const fb = await res.json();
                if (typeof fb?.rating === 'number' && fb.rating >= 1 && fb.rating <= 5) {
                    setTimeout(() => setRating(fb.rating), 100);
                }
                if (fb?.comment) {
                    document.getElementById('fbComment').value = fb.comment;
                    document.getElementById('charCount').textContent = fb.comment.length;
                }
            }
        } catch (error) {
            console.error('Error loading feedback:', error);
        }
        
        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('feedbackModal'));
        modal.show();
    }

    async function submitFeedback() {
        const rating = parseInt(document.getElementById('fbRating').value || '5', 10);
        if (isNaN(rating) || rating < 1 || rating > 5) {
            alert('Please select a rating between 1 and 5');
            return;
        }
        
        const comment = document.getElementById('fbComment').value.trim();
        const baseUrl = '@Model.ApiBaseUrl';
        const url = (baseUrl ? baseUrl : '') + `/api/activity/${feedbackActivityId}/feedback`;
        
        try {
            const res = await fetch(url, {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json', 
                    'Accept': 'application/json' 
                },
                body: JSON.stringify({ rating, comment }),
                credentials: 'include'
            });
            
            const data = await res.json().catch(() => ({}));
            
            if (!res.ok) {
                alert(data?.message || 'Failed to submit feedback. Please try again.');
                return;
            }
            
            // Close modal and reload page
            bootstrap.Modal.getInstance(document.getElementById('feedbackModal')).hide();
            location.reload();
        } catch (error) {
            console.error('Error submitting feedback:', error);
            alert('An error occurred. Please try again.');
        }
    }
</script>
