@page
@model WebFE.Pages.Student.MyActivities.IndexModel
@{
    ViewData["Title"] = "My Activities";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="container my-5">
    <h2 class="mb-4">My Activities</h2>

    @if (Model.Items == null || Model.Items.Count == 0)
    {
        <div class="alert alert-info">You haven't registered for any activities yet.</div>
    }
    else
    {
        <div class="row g-3">
            @foreach (var item in Model.Items)
            {
                <div class="col-md-6">
                    <div class="card shadow-sm border-0 h-100">
                        <div class="row g-0">
                            <div class="col-4">
                                @if (!string.IsNullOrWhiteSpace(item.ImageUrl))
                                {
                                    <img src="@item.ImageUrl" class="img-fluid rounded-start" style="height: 100%; object-fit: cover;">
                                }
                                else
                                {
                                    <div class="bg-gradient-primary w-100 h-100 d-flex align-items-center justify-content-center text-white">
                                        <i class="bi bi-calendar-event" style="font-size: 2rem;"></i>
                                    </div>
                                }
                            </div>
                            <div class="col-8">
                                <div class="card-body">
                                    <h5 class="card-title mb-1">@item.Title</h5>
                                    <p class="card-text text-muted mb-2">@item.StartTime.ToString("MMM dd, yyyy HH:mm") - @item.EndTime.ToString("MMM dd, yyyy HH:mm")</p>
                                    @if (!string.IsNullOrWhiteSpace(item.ClubName))
                                    {
                                        <p class="card-text small mb-2"><i class="bi bi-people"></i> @item.ClubName</p>
                                    }
                                    <div class="d-flex gap-2">
                                        <a class="btn btn-outline-primary btn-sm" asp-page="/Activities/Details" asp-route-id="@item.Id">Details</a>
                                        @if (item.HasAttended)
                                        {
                                            <button class="btn btn-success btn-sm" onclick="openFeedback(@item.Id)">@((item.HasFeedback ? "Edit Feedback" : "Feedback"))</button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Feedback Modal -->
<div class="modal fade" id="feedbackModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Submit Feedback</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label class="form-label">Rating (1-5)</label>
          <select id="fbRating" class="form-select">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5" selected>5</option>
          </select>
        </div>
        <div class="mb-3">
          <label class="form-label">Comment</label>
          <textarea class="form-control" id="fbComment" rows="3" maxlength="500"></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="submitFeedback()">Submit</button>
      </div>
    </div>
  </div>
</div>

<script>
    let feedbackActivityId = 0;
    async function openFeedback(id) {
        feedbackActivityId = id;
        // Prefill existing feedback
        try {
            const baseUrl = '@Model.ApiBaseUrl';
            const url = (baseUrl ? baseUrl : '') + `/api/activity/${id}/my-feedback`;
            const res = await fetch(url, { credentials: 'include' });
            if (res.ok) {
                const fb = await res.json();
                if (typeof fb?.rating === 'number') {
                    document.getElementById('fbRating').value = fb.rating;
                }
                document.getElementById('fbComment').value = fb?.comment || '';
            } else { document.getElementById('fbComment').value = ''; document.getElementById('fbRating').value = '5'; }
        } catch { document.getElementById('fbRating').value = '5'; }
        const modal = new bootstrap.Modal(document.getElementById('feedbackModal'));
        modal.show();
    }

    async function submitFeedback() {
        const rating = parseInt(document.getElementById('fbRating').value || '5', 10);
        if (isNaN(rating) || rating < 1 || rating > 5) { alert('Rating must be between 1 and 5'); return; }
        const comment = document.getElementById('fbComment').value || '';
        const baseUrl = '@Model.ApiBaseUrl';
        const url = (baseUrl ? baseUrl : '') + `/api/activity/${feedbackActivityId}/feedback`;
        const res = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
            body: JSON.stringify({ rating, comment }),
            credentials: 'include'
        });
        const data = await res.json().catch(() => ({}));
        if (!res.ok) { alert(data?.message || 'Submit failed'); return; }
        location.reload();
    }

    
</script>
