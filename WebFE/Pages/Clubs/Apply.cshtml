@page "{clubId:int}"
@model WebFE.Pages.Clubs.ApplyModel
@{
    ViewData["Title"] = $"Apply to {Model.ClubName}";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <!-- Header -->
            <div class="text-center mb-4">
                <div class="mb-3">
                    @if (!string.IsNullOrEmpty(Model.ClubLogoUrl))
                    {
                        <img src="@Model.ClubLogoUrl" alt="@Model.ClubName" class="rounded-circle" style="width: 80px; height: 80px; object-fit: cover;">
                    }
                    else
                    {
                        <div class="rounded-circle bg-primary text-white d-inline-flex align-items-center justify-content-center" style="width: 80px; height: 80px; font-size: 2rem;">
                            @Model.ClubName.Substring(0, 1)
                        </div>
                    }
                </div>
                <h2 class="fw-bold">Apply to @Model.ClubName</h2>
                <p class="text-muted">Join our community and make a difference!</p>
            </div>

            @if (Model.ExistingRequest != null)
            {
                <!-- Show existing request status -->
                <div class="card shadow-sm border-0">
                    <div class="card-body p-4">
                        <div class="text-center mb-4">
                            @{
                                var statusIcon = Model.ExistingRequest.Status == "Pending" ? "clock" : 
                                               Model.ExistingRequest.Status == "Approved" ? "check-circle" : "x-circle";
                                var statusColor = Model.ExistingRequest.Status == "Pending" ? "warning" : 
                                                Model.ExistingRequest.Status == "Approved" ? "success" : "danger";
                            }
                            <div class="mb-3">
                                <i data-lucide="@statusIcon" style="width: 64px; height: 64px; color: var(--bs-@statusColor);"></i>
                            </div>
                            <h3 class="text-@statusColor">Application @Model.ExistingRequest.Status</h3>
                        </div>

                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label text-muted small">Applied Date</label>
                                <p class="fw-semibold">@Model.ExistingRequest.CreatedAt.ToString("dd/MM/yyyy HH:mm")</p>
                            </div>
                            @if (!string.IsNullOrEmpty(Model.ExistingRequest.DepartmentName))
                            {
                                <div class="col-md-6">
                                    <label class="form-label text-muted small">Department</label>
                                    <p class="fw-semibold">@Model.ExistingRequest.DepartmentName</p>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(Model.ExistingRequest.Motivation))
                            {
                                <div class="col-12">
                                    <label class="form-label text-muted small">Your Motivation</label>
                                    <p class="border p-3 rounded bg-light">@Model.ExistingRequest.Motivation</p>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(Model.ExistingRequest.CvUrl))
                            {
                                <div class="col-12">
                                    <label class="form-label text-muted small">Your CV</label>
                                    <div>
                                        <a href="https://localhost:5001/api/fileupload/cv/@System.IO.Path.GetFileName(Model.ExistingRequest.CvUrl)" target="_blank" class="btn btn-sm btn-outline-primary">
                                            <i data-lucide="file-text" style="width: 16px; height: 16px;"></i>
                                            View Uploaded CV
                                        </a>
                                    </div>
                                </div>
                            }
                            @if (Model.ExistingRequest.ProcessedAt.HasValue)
                            {
                                <div class="col-md-6">
                                    <label class="form-label text-muted small">Processed Date</label>
                                    <p class="fw-semibold">@Model.ExistingRequest.ProcessedAt.Value.ToString("dd/MM/yyyy HH:mm")</p>
                                </div>
                                @if (!string.IsNullOrEmpty(Model.ExistingRequest.ProcessedByName))
                                {
                                    <div class="col-md-6">
                                        <label class="form-label text-muted small">Processed By</label>
                                        <p class="fw-semibold">@Model.ExistingRequest.ProcessedByName</p>
                                    </div>
                                }
                            }
                        </div>

                        <!-- Interview Information (loaded via JavaScript) -->
                        <div id="interviewSection" class="mt-4"></div>

                        @if (Model.ExistingRequest.Status == "Pending")
                        {
                            <div class="alert alert-info mt-4 mb-0">
                                <i data-lucide="info" style="width: 18px; height: 18px;"></i>
                                Your application is being reviewed by the club managers. You will be notified once a decision is made.
                            </div>
                        }
                        else if (Model.ExistingRequest.Status == "Approved")
                        {
                            <div class="alert alert-success mt-4 mb-0">
                                <i data-lucide="check-circle" style="width: 18px; height: 18px;"></i>
                                <strong>Congratulations!</strong> You are now a member of @Model.ClubName!
                            </div>
                        }
                        else if (Model.ExistingRequest.Status == "Rejected")
                        {
                            <div class="alert alert-danger mt-4 mb-0">
                                <i data-lucide="x-circle" style="width: 18px; height: 18px;"></i>
                                Your application was not approved. Please contact the club manager for more information.
                            </div>
                        }
                    </div>
                </div>

                <div class="text-center mt-4">
                    <a href="/Clubs/Details/@Model.ClubId" class="btn btn-primary">Back to Club</a>
                </div>
            }
            else if (!Model.CanApply)
            {
                <div class="alert alert-warning">
                    <i data-lucide="alert-circle" style="width: 20px; height: 20px;"></i>
                    <strong>Cannot apply at this time.</strong>
                    <p class="mb-0">This club is not currently accepting new members.</p>
                </div>
                <div class="text-center mt-4">
                    <a href="/Clubs/Details/@Model.ClubId" class="btn btn-secondary">Back to Club</a>
                </div>
            }
            else
            {
                <!-- Application Form -->
                <div class="card shadow-sm border-0">
                    <div class="card-body p-4">
                        <form id="applyForm" method="post">
                            <!-- Department Selection -->
                            <div class="mb-4">
                                <label for="departmentSelect" class="form-label fw-semibold">
                                    <i data-lucide="briefcase" style="width: 18px; height: 18px;"></i>
                                    Choose Department (Optional)
                                </label>
                                <select class="form-select" id="departmentSelect" name="departmentId">
                                    <option value="">-- No specific department --</option>
                                    @foreach (var dept in Model.Departments)
                                    {
                                        <option value="@dept.Id">
                                            @dept.Name
                                            @if (dept.MemberCount > 0)
                                            {
                                                <text>(@dept.MemberCount members)</text>
                                            }
                                        </option>
                                    }
                                </select>
                                <div class="form-text">Select the department you're interested in joining</div>
                            </div>

                            <!-- Motivation -->
                            <div class="mb-4">
                                <label for="motivation" class="form-label fw-semibold">
                                    <i data-lucide="message-circle" style="width: 18px; height: 18px;"></i>
                                    Why do you want to join?
                                </label>
                                <textarea class="form-control" id="motivation" name="motivation" rows="5" maxlength="500" placeholder="Tell us about your interests, skills, and why you want to join this club..."></textarea>
                                <div class="form-text">
                                    <span id="charCount">0</span>/500 characters
                                </div>
                            </div>

                            <!-- CV Upload -->
                            <div class="mb-4">
                                <label for="cvUpload" class="form-label fw-semibold">
                                    <i data-lucide="file-text" style="width: 18px; height: 18px;"></i>
                                    Upload CV (Optional)
                                </label>
                                <input class="form-control" type="file" id="cvUpload" accept=".pdf,.doc,.docx">
                                <div class="form-text">Accepted formats: PDF, DOC, DOCX (Max 5MB)</div>
                                <div id="cvPreview" class="mt-2"></div>
                            </div>

                            <!-- Submit Button -->
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg" id="submitBtn">
                                    <i data-lucide="send" style="width: 20px; height: 20px;"></i>
                                    Submit Application
                                </button>
                                <a href="/Clubs/Details/@Model.ClubId" class="btn btn-outline-secondary">Cancel</a>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Info Box -->
                <div class="alert alert-info mt-4">
                    <h6 class="alert-heading">
                        <i data-lucide="info" style="width: 18px; height: 18px;"></i>
                        What happens next?
                    </h6>
                    <ul class="mb-0 small">
                        <li>Your application will be reviewed by the club managers</li>
                        <li>You'll be notified once a decision is made</li>
                        <li>You can check your application status in your profile</li>
                    </ul>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        lucide.createIcons();

        const form = document.getElementById('applyForm');
        const motivationInput = document.getElementById('motivation');
        const charCount = document.getElementById('charCount');
        const cvUpload = document.getElementById('cvUpload');
        const cvPreview = document.getElementById('cvPreview');
        const submitBtn = document.getElementById('submitBtn');

        let uploadedCvUrl = null;

        // Character counter
        if (motivationInput) {
            motivationInput.addEventListener('input', () => {
                charCount.textContent = motivationInput.value.length;
            });
        }

        // CV preview
        if (cvUpload) {
            cvUpload.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    // Validate file size (5MB)
                    if (file.size > 5 * 1024 * 1024) {
                        alert('File size must be less than 5MB');
                        cvUpload.value = '';
                        return;
                    }

                    cvPreview.innerHTML = `
                        <div class="alert alert-secondary d-flex align-items-center">
                            <i data-lucide="file" style="width: 20px; height: 20px; margin-right: 8px;"></i>
                            <div class="flex-grow-1">
                                <strong>${file.name}</strong>
                                <small class="text-muted d-block">${(file.size / 1024).toFixed(2)} KB</small>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearCV()">Remove</button>
                        </div>
                    `;
                    lucide.createIcons();
                }
            });
        }

        window.clearCV = function() {
            cvUpload.value = '';
            cvPreview.innerHTML = '';
            uploadedCvUrl = null;
        };

        // Form submission
        if (form) {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                submitBtn.disabled = true;
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Submitting...';

                try {
                    // Upload CV first if selected
                    const cvFile = cvUpload.files[0];
                    if (cvFile) {
                        uploadedCvUrl = await uploadCV(cvFile);
                    }

                    // Submit application
                    const formData = {
                        clubId: @Model.ClubId,
                        departmentId: document.getElementById('departmentSelect').value || null,
                        motivation: motivationInput.value || null,
                        cvUrl: uploadedCvUrl
                    };

                    const response = await fetch('https://localhost:5001/api/joinrequest', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify(formData)
                    });

                    if (response.ok) {
                        alert('Application submitted successfully! You will be notified once it\'s reviewed.');
                        window.location.href = '/Clubs/Details/@Model.ClubId';
                    } else {
                        const error = await response.json();
                        alert('Error: ' + (error.message || 'Failed to submit application'));
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = '<i data-lucide="send" style="width: 20px; height: 20px;"></i> Submit Application';
                        lucide.createIcons();
                    }
                } catch (error) {
                    console.error('Error submitting application:', error);
                    alert('An error occurred. Please try again.');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i data-lucide="send" style="width: 20px; height: 20px;"></i> Submit Application';
                    lucide.createIcons();
                }
            });
        }

        async function uploadCV(file) {
            try {
                const formData = new FormData();
                formData.append('file', file);

                const response = await fetch('https://localhost:5001/api/fileupload/cv', {
                    method: 'POST',
                    credentials: 'include',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error('Failed to upload CV');
                }

                const result = await response.json();
                console.log('CV uploaded successfully:', result.url);
                return result.url; // Returns /uploads/cv/xxx.pdf
            } catch (error) {
                console.error('Error uploading CV:', error);
                throw error;
            }
        }

        // Load interview information if exists
        @if (Model.ExistingRequest != null && Model.ExistingRequest.Id > 0)
        {
            @:async function loadInterviewInfo() {
            @:    try {
            @:        const response = await fetch(`https://localhost:5001/api/interview/request/@Model.ExistingRequest.Id`, {
            @:            credentials: 'include'
            @:        });
            @:        
            @:        if (response.ok) {
            @:            const interview = await response.json();
            @:            displayInterviewInfo(interview);
            @:        }
            @:    } catch (error) {
            @:        console.error('Error loading interview:', error);
            @:    }
            @:}
            @:
            @:function displayInterviewInfo(interview) {
            @:    const scheduledDate = new Date(interview.scheduledDate).toLocaleString('vi-VN');
            @:    const hasEvaluation = interview.evaluation && interview.evaluation.trim() !== '';
            @:    const status = interview.status;
            @:    const statusClass = status === 'Completed' ? 'success' : (status === 'Scheduled' ? 'primary' : 'secondary');
            @:    
            @:    let html = `
            @:        <div class="card border-${statusClass}">
            @:            <div class="card-header bg-${statusClass} text-white">
            @:                <h5 class="mb-0">
            @:                    <i data-lucide="calendar" style="width: 20px; height: 20px;"></i>
            @:                    Interview Scheduled
            @:                </h5>
            @:            </div>
            @:            <div class="card-body">
            @:                <div class="row g-3">
            @:                    <div class="col-md-6">
            @:                        <label class="form-label text-muted small">Date & Time</label>
            @:                        <p class="fw-semibold"><i data-lucide="clock" style="width: 16px; height: 16px;"></i> ${scheduledDate}</p>
            @:                    </div>
            @:                    <div class="col-md-6">
            @:                        <label class="form-label text-muted small">Location</label>
            @:                        <p class="fw-semibold"><i data-lucide="map-pin" style="width: 16px; height: 16px;"></i> ${interview.location}</p>
            @:                    </div>
            @:    `;
            @:    
            @:    if (interview.notes) {
            @:        html += `
            @:            <div class="col-12">
            @:                <label class="form-label text-muted small">Additional Notes</label>
            @:                <p class="border p-3 rounded bg-light">${interview.notes}</p>
            @:            </div>
            @:        `;
            @:    }
            @:    
            @:    if (hasEvaluation) {
            @:        html += `
            @:            <div class="col-12">
            @:                <label class="form-label text-muted small">Interview Evaluation</label>
            @:                <p class="border p-3 rounded bg-light">${interview.evaluation}</p>
            @:            </div>
            @:        `;
            @:    }
            @:    
            @:    html += `
            @:                    <div class="col-12">
            @:                        <span class="badge bg-${statusClass}">${status}</span>
            @:                    </div>
            @:                </div>
            @:            </div>
            @:        </div>
            @:    `;
            @:    
            @:    document.getElementById('interviewSection').innerHTML = html;
            @:    lucide.createIcons();
            @:}
            @:
            @:// Load interview on page load
            @:document.addEventListener('DOMContentLoaded', () => {
            @:    loadInterviewInfo();
            @:});
        }
    </script>
}

